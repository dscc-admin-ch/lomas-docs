{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3f18d338",
   "metadata": {},
   "source": [
    "# Lomas Client Side: Using DiffPrivlib"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1582a2ae",
   "metadata": {},
   "source": [
    "This notebook showcases how researcher could use lomas platform with DiffPrivLib. It explains the different functionnalities provided by the `lomas-client` client library to interact with lomas server.\n",
    "\n",
    "The secure data are never visible by researchers. They can only access to differentially private responses via queries to the server.\n",
    "\n",
    "Each user has access to one or multiple projects and for each dataset has a limited budget with $\\epsilon$ and $\\delta$ values."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5b73135c",
   "metadata": {},
   "source": [
    "In this notebook the researcher is a penguin researcher named Dr. Antarctica. She aims to do a grounbdbreaking research on various penguins data."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "01ae30d2",
   "metadata": {},
   "source": [
    "## Step 1: Install the library\n",
    "To interact with the secure server on which the data is stored, Dr.Antartica first needs to install the library `lomas-client` on her local developping environment. \n",
    "\n",
    "It can be installed via the pip command:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8b340f40-32c9-487b-bc0c-a76593d43980",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:09:39.586290Z",
     "iopub.status.busy": "2025-05-01T08:09:39.586128Z",
     "iopub.status.idle": "2025-05-01T08:09:39.590318Z",
     "shell.execute_reply": "2025-05-01T08:09:39.589937Z"
    }
   },
   "outputs": [],
   "source": [
    "# !pip install lomas_client"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "46c4f70b-1491-4162-930c-e0a86406ba69",
   "metadata": {},
   "source": [
    "Or using a local version of the client"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "36d508bf-6cc3-4034-8e11-fffe858552f9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:09:39.591776Z",
     "iopub.status.busy": "2025-05-01T08:09:39.591633Z",
     "iopub.status.idle": "2025-05-01T08:09:39.596424Z",
     "shell.execute_reply": "2025-05-01T08:09:39.596078Z"
    }
   },
   "outputs": [],
   "source": [
    "import sys\n",
    "import os\n",
    "sys.path.append(os.path.abspath(os.path.join('..')))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9535e92e-620e-4df4-92dd-4ea2c653e4ab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:09:39.597820Z",
     "iopub.status.busy": "2025-05-01T08:09:39.597677Z",
     "iopub.status.idle": "2025-05-01T08:09:42.178930Z",
     "shell.execute_reply": "2025-05-01T08:09:42.178481Z"
    }
   },
   "outputs": [],
   "source": [
    "from lomas_client import Client\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9c63718b",
   "metadata": {},
   "source": [
    "## Step 2: Initialise the client\n",
    "\n",
    "Once the library is installed, a Client object must be created. It is responsible for sending sending requests to the server and processing responses in the local environment. It enables a seamless interaction with the server. \n",
    "\n",
    "To create the client, Dr. Antartica needs to give it a few parameters:\n",
    "- a url: the root application endpoint to the remote secure server.\n",
    "- user_name: her name as registered in the database (Dr. Alice Antartica)\n",
    "- dataset_name: the name of the dataset that she wants to query (PENGUIN)\n",
    "\n",
    "She will only be able to query on the real dataset if the queen Icergina has previously made her an account in the database, given her access to the PENGUIN dataset and has given her some epsilon and delta credit (as is done in the Admin Notebook for Users and Datasets management)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "941991f7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:09:42.181171Z",
     "iopub.status.busy": "2025-05-01T08:09:42.180822Z",
     "iopub.status.idle": "2025-05-01T08:09:42.184270Z",
     "shell.execute_reply": "2025-05-01T08:09:42.183350Z"
    }
   },
   "outputs": [],
   "source": [
    "DATASET_NAME = \"PENGUIN\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "300df93a-f3d5-4293-ba19-685633dd03ba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:09:42.185716Z",
     "iopub.status.busy": "2025-05-01T08:09:42.185560Z",
     "iopub.status.idle": "2025-05-01T08:09:42.189608Z",
     "shell.execute_reply": "2025-05-01T08:09:42.188667Z"
    }
   },
   "outputs": [],
   "source": [
    "# The following would usually be set in the environment by a system administrator\n",
    "# and be tranparent to lomas users.\n",
    "APP_URL = \"http://localhost:48080\"                                    # For local devenv setup\n",
    "# APP_URL = \"http://lomas_server:48080\"                               # For local docker compose setup\n",
    "# APP_URL = \"http://lomas-server.example.com:80\"                      # For Kubernetes deployment\n",
    "USER_NAME = \"Dr.Antartica\"\n",
    "\n",
    "import os\n",
    "os.environ[\"LOMAS_CLIENT_ID\"] = USER_NAME\n",
    "os.environ[\"LOMAS_CLIENT_SECRET\"] = USER_NAME.lower()\n",
    "os.environ[\"LOMAS_KEYCLOAK_ADDRESS\"] = \"localhost\"                    # For local devenv setup\n",
    "# os.environ[\"LOMAS_KEYCLOAK_ADDRESS\"] = \"keycloak\"                   # For local docker compose setup\n",
    "# os.environ[\"LOMAS_KEYCLOAK_ADDRESS\"] = \"lomas-keycloak.example.com\" # For Kubernetes deployment \n",
    "os.environ[\"LOMAS_KEYCLOAK_PORT\"] = \"4442\"                              # For local deployments\n",
    "# os.environ[\"LOMAS_KEYCLOAK_PORT\"] = \"443\"                           # For Kubernetes deployment\n",
    "os.environ[\"LOMAS_KEYCLOAK_USE_TLS\"] = \"0\"                            # For local deployments\n",
    "# os.environ[\"LOMAS_KEYCLOAK_USE_TLS\"] = \"1\"                          # For Kubernetes deployments\n",
    "os.environ[\"LOMAS_REALM\"] = \"lomas\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "4b434dcf-e87a-4674-bb9a-694eaf5c8e29",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:09:42.190884Z",
     "iopub.status.busy": "2025-05-01T08:09:42.190737Z",
     "iopub.status.idle": "2025-05-01T08:09:42.207779Z",
     "shell.execute_reply": "2025-05-01T08:09:42.206977Z"
    }
   },
   "outputs": [],
   "source": [
    "client = Client(url=APP_URL, dataset_name=DATASET_NAME)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ec400c8",
   "metadata": {},
   "source": [
    "And that's it for the preparation. She is now ready to use the various functionnalities offered by `lomas-client`."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9b9a5f13",
   "metadata": {},
   "source": [
    "## Step 3: Metadata and dummy dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c7cb5531",
   "metadata": {},
   "source": [
    "### Getting dataset metadata\n",
    "\n",
    "Dr. Antartica has never seen the data and as a first step to understand what is available to her, she would like to check the metadata of the dataset. Therefore, she just needs to call the `get_dataset_metadata()` function of the client. As this is public information, this does not cost any budget."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "0fdebac9-57fc-4410-878b-5a77425af634",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:09:42.209143Z",
     "iopub.status.busy": "2025-05-01T08:09:42.208992Z",
     "iopub.status.idle": "2025-05-01T08:09:42.223244Z",
     "shell.execute_reply": "2025-05-01T08:09:42.222299Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'max_ids': 1,\n",
       " 'rows': 344,\n",
       " 'row_privacy': True,\n",
       " 'censor_dims': False,\n",
       " 'columns': {'species': {'private_id': False,\n",
       "   'nullable': False,\n",
       "   'max_partition_length': None,\n",
       "   'max_influenced_partitions': None,\n",
       "   'max_partition_contributions': None,\n",
       "   'type': 'string',\n",
       "   'cardinality': 3,\n",
       "   'categories': ['Adelie', 'Chinstrap', 'Gentoo']},\n",
       "  'island': {'private_id': False,\n",
       "   'nullable': False,\n",
       "   'max_partition_length': None,\n",
       "   'max_influenced_partitions': None,\n",
       "   'max_partition_contributions': None,\n",
       "   'type': 'string',\n",
       "   'cardinality': 3,\n",
       "   'categories': ['Torgersen', 'Biscoe', 'Dream']},\n",
       "  'bill_length_mm': {'private_id': False,\n",
       "   'nullable': False,\n",
       "   'max_partition_length': None,\n",
       "   'max_influenced_partitions': None,\n",
       "   'max_partition_contributions': None,\n",
       "   'type': 'float',\n",
       "   'precision': 64,\n",
       "   'lower': 30.0,\n",
       "   'upper': 65.0},\n",
       "  'bill_depth_mm': {'private_id': False,\n",
       "   'nullable': False,\n",
       "   'max_partition_length': None,\n",
       "   'max_influenced_partitions': None,\n",
       "   'max_partition_contributions': None,\n",
       "   'type': 'float',\n",
       "   'precision': 64,\n",
       "   'lower': 13.0,\n",
       "   'upper': 23.0},\n",
       "  'flipper_length_mm': {'private_id': False,\n",
       "   'nullable': False,\n",
       "   'max_partition_length': None,\n",
       "   'max_influenced_partitions': None,\n",
       "   'max_partition_contributions': None,\n",
       "   'type': 'float',\n",
       "   'precision': 64,\n",
       "   'lower': 150.0,\n",
       "   'upper': 250.0},\n",
       "  'body_mass_g': {'private_id': False,\n",
       "   'nullable': False,\n",
       "   'max_partition_length': None,\n",
       "   'max_influenced_partitions': None,\n",
       "   'max_partition_contributions': None,\n",
       "   'type': 'float',\n",
       "   'precision': 64,\n",
       "   'lower': 2000.0,\n",
       "   'upper': 7000.0},\n",
       "  'sex': {'private_id': False,\n",
       "   'nullable': False,\n",
       "   'max_partition_length': None,\n",
       "   'max_influenced_partitions': None,\n",
       "   'max_partition_contributions': None,\n",
       "   'type': 'string',\n",
       "   'cardinality': 2,\n",
       "   'categories': ['MALE', 'FEMALE']}}}"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "penguin_metadata = client.get_dataset_metadata()\n",
    "penguin_metadata"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9e7ca7ae-bf17-40c8-aa75-2d72fcdd3088",
   "metadata": {},
   "source": [
    "## Step 4: Train Logistic Regression model with DiffPrivLib"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2de1389c-53a7-4098-bc3c-397c12a4b869",
   "metadata": {},
   "source": [
    "We want to train an ML model to guess the species of penguins based on their bill length and depth, flipper length and body mass.\n",
    "\n",
    "Therefore, we use a DiffPrivLib pipeline which:\n",
    "- standard scales the dimensions between the metadata bounds\n",
    "- and then performs a logistic regression\n",
    "to predict the species of penguins."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "2864729f-2ce4-4d81-a446-8e3f2c1493b3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:09:42.224565Z",
     "iopub.status.busy": "2025-05-01T08:09:42.224418Z",
     "iopub.status.idle": "2025-05-01T08:09:42.226959Z",
     "shell.execute_reply": "2025-05-01T08:09:42.226562Z"
    }
   },
   "outputs": [],
   "source": [
    "from sklearn.pipeline import Pipeline\n",
    "from diffprivlib import models\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a06365e9-4076-4592-871a-31af91d6a05d",
   "metadata": {},
   "source": [
    "### Classification: Logistic Regression"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ea567662-6518-4c10-bd87-0fb6028db263",
   "metadata": {},
   "source": [
    "Dr. Antartica wants to do a logistic regression on the feature columns 'bill_length_mm', 'bill_depth_mm', 'flipper_length_mm' and'body_mass_g' to predict penguin species."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "bda4884f-bce2-43b3-875e-dbb135492e79",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:09:42.228294Z",
     "iopub.status.busy": "2025-05-01T08:09:42.228137Z",
     "iopub.status.idle": "2025-05-01T08:09:42.231188Z",
     "shell.execute_reply": "2025-05-01T08:09:42.230446Z"
    }
   },
   "outputs": [],
   "source": [
    "feature_columns = ['bill_length_mm', 'bill_depth_mm', 'flipper_length_mm', 'body_mass_g']\n",
    "target_columns = ['species']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2fe9db5e-9c57-41f3-a444-c9f67100ba81",
   "metadata": {},
   "source": [
    "#### She starts to write the associated DiffPrivLib pipeline and tries it on the dummy."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eead3541-66e5-4c0f-aa5b-7b97821afe39",
   "metadata": {},
   "source": [
    "If the DiffprivlibCompatibilityWarning is raised by DiffPrivLib library, an warning will be raised the first time (as in DiffPrivLib) then the 'wrong' parameters will be ignored within the server."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "804f31cd-f277-47d4-9648-a51872eccf29",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:09:42.232451Z",
     "iopub.status.busy": "2025-05-01T08:09:42.232307Z",
     "iopub.status.idle": "2025-05-01T08:09:42.239934Z",
     "shell.execute_reply": "2025-05-01T08:09:42.239525Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/azureuser/work/sdd-poc-server/.devenv/state/venv/lib/python3.12/site-packages/diffprivlib/utils.py:71: DiffprivlibCompatibilityWarning: Parameter 'svd_solver' is not functional in diffprivlib.  Remove this parameter to suppress this warning.\n",
      "  warnings.warn(f\"Parameter '{arg}' is not functional in diffprivlib.  Remove this parameter to suppress this \"\n"
     ]
    }
   ],
   "source": [
    "# DiffprivlibCompatibilityWarning Error expected\n",
    "dpl_pipeline = Pipeline([\n",
    "    ('scaler', models.StandardScaler(epsilon = 0.5)),\n",
    "    ('classifier', models.LogisticRegression(epsilon = 1.0, svd_solver='full'))\n",
    "])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "15dd0c42-3e20-4b27-95b3-9b55622b4bfd",
   "metadata": {},
   "source": [
    "To resolve the DiffprivlibCompatibilityWarning issue, the svd_solver should not be set as it is incompatible with DiffPrivLib. If these warnings are ignore by the user, the default behaviour of DiffPrivLib will be applied."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9c5d7fa4-cfe6-4a4f-88ff-8e88ca31dfed",
   "metadata": {},
   "source": [
    "If PrivacyLeakWarning are encountered, then the query will not be processed by the server and will return an error."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "f1c9cffb-8327-400d-ab9d-35c5450fd4d6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:09:42.241168Z",
     "iopub.status.busy": "2025-05-01T08:09:42.241021Z",
     "iopub.status.idle": "2025-05-01T08:09:42.243760Z",
     "shell.execute_reply": "2025-05-01T08:09:42.243408Z"
    }
   },
   "outputs": [],
   "source": [
    "dpl_pipeline = Pipeline([\n",
    "    ('scaler', models.StandardScaler(epsilon = 0.5)),\n",
    "    ('classifier', models.LogisticRegression(epsilon = 1.0))\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "db1ddfbc-de3e-43fe-9958-49f9e6dad89f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:09:42.245255Z",
     "iopub.status.busy": "2025-05-01T08:09:42.244883Z",
     "iopub.status.idle": "2025-05-01T08:09:42.985647Z",
     "shell.execute_reply": "2025-05-01T08:09:42.983825Z"
    },
    "tags": [
     "raises-exception"
    ]
   },
   "outputs": [
    {
     "ename": "ExternalLibraryException",
     "evalue": "(<DPLibraries.DIFFPRIVLIB: 'diffprivlib'>, \"PrivacyLeakWarning: Bounds parameter hasn't been specified, so falling back to determining bounds from the data.\\n This will result in additional privacy leakage.  To ensure differential privacy with no additional privacy loss, specify `bounds` for each valued returned by np.mean().. Lomas server cannot fit pipeline on data, PrivacyLeakWarning is a blocker.\")",
     "output_type": "error",
     "traceback": [
      "\u001b[31m---------------------------------------------------------------------------\u001b[39m",
      "\u001b[31mExternalLibraryException\u001b[39m                  Traceback (most recent call last)",
      "\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[12]\u001b[39m\u001b[32m, line 2\u001b[39m\n\u001b[32m      1\u001b[39m \u001b[38;5;66;03m# Expect PrivacyLeakWarning Error\u001b[39;00m\n\u001b[32m----> \u001b[39m\u001b[32m2\u001b[39m dummy_response = \u001b[43mclient\u001b[49m\u001b[43m.\u001b[49m\u001b[43mdiffprivlib\u001b[49m\u001b[43m.\u001b[49m\u001b[43mquery\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m      3\u001b[39m \u001b[43m    \u001b[49m\u001b[43mpipeline\u001b[49m\u001b[43m \u001b[49m\u001b[43m=\u001b[49m\u001b[43m \u001b[49m\u001b[43mdpl_pipeline\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m      4\u001b[39m \u001b[43m    \u001b[49m\u001b[43mfeature_columns\u001b[49m\u001b[43m \u001b[49m\u001b[43m=\u001b[49m\u001b[43m  \u001b[49m\u001b[43mfeature_columns\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m      5\u001b[39m \u001b[43m    \u001b[49m\u001b[43mtarget_columns\u001b[49m\u001b[43m \u001b[49m\u001b[43m=\u001b[49m\u001b[43m \u001b[49m\u001b[43mtarget_columns\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m      6\u001b[39m \u001b[43m    \u001b[49m\u001b[43mdummy\u001b[49m\u001b[43m \u001b[49m\u001b[43m=\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\n\u001b[32m      7\u001b[39m \u001b[43m)\u001b[49m\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/work/sdd-poc-server/client/lomas_client/libraries/diffprivlib.py:142\u001b[39m, in \u001b[36mDiffPrivLibClient.query\u001b[39m\u001b[34m(self, pipeline, feature_columns, target_columns, test_size, test_train_split_seed, imputer_strategy, dummy, nb_rows, seed)\u001b[39m\n\u001b[32m    139\u001b[39m body = request_model.model_validate(body_dict)\n\u001b[32m    140\u001b[39m res = \u001b[38;5;28mself\u001b[39m.http_client.post(endpoint, body)\n\u001b[32m--> \u001b[39m\u001b[32m142\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mvalidate_model_response\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mhttp_client\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mres\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mQueryResponse\u001b[49m\u001b[43m)\u001b[49m\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/work/sdd-poc-server/client/lomas_client/utils.py:93\u001b[39m, in \u001b[36mvalidate_model_response\u001b[39m\u001b[34m(client, response, response_model)\u001b[39m\n\u001b[32m     91\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m job.status == \u001b[33m\"\u001b[39m\u001b[33mfailed\u001b[39m\u001b[33m\"\u001b[39m:\n\u001b[32m     92\u001b[39m     \u001b[38;5;28;01massert\u001b[39;00m job.error \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m, \u001b[33m\"\u001b[39m\u001b[33mjob \u001b[39m\u001b[38;5;132;01m{job_uid}\u001b[39;00m\u001b[33m failed without error !\u001b[39m\u001b[33m\"\u001b[39m\n\u001b[32m---> \u001b[39m\u001b[32m93\u001b[39m     \u001b[43mraise_error_from_model\u001b[49m\u001b[43m(\u001b[49m\u001b[43mjob\u001b[49m\u001b[43m.\u001b[49m\u001b[43merror\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m     95\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m response_model.model_validate(job.result)\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/work/sdd-poc-server/core/lomas_core/error_handler.py:150\u001b[39m, in \u001b[36mraise_error_from_model\u001b[39m\u001b[34m(error_model)\u001b[39m\n\u001b[32m    148\u001b[39m     \u001b[38;5;28;01mraise\u001b[39;00m InvalidQueryException(error_model.message)\n\u001b[32m    149\u001b[39m \u001b[38;5;28;01mcase\u001b[39;00m ExternalLibraryExceptionModel():\n\u001b[32m--> \u001b[39m\u001b[32m150\u001b[39m     \u001b[38;5;28;01mraise\u001b[39;00m ExternalLibraryException(error_model.library, error_model.message)\n\u001b[32m    151\u001b[39m \u001b[38;5;28;01mcase\u001b[39;00m UnauthorizedAccessExceptionModel():\n\u001b[32m    152\u001b[39m     \u001b[38;5;28;01mraise\u001b[39;00m UnauthorizedAccessException(error_model.message)\n",
      "\u001b[31mExternalLibraryException\u001b[39m: (<DPLibraries.DIFFPRIVLIB: 'diffprivlib'>, \"PrivacyLeakWarning: Bounds parameter hasn't been specified, so falling back to determining bounds from the data.\\n This will result in additional privacy leakage.  To ensure differential privacy with no additional privacy loss, specify `bounds` for each valued returned by np.mean().. Lomas server cannot fit pipeline on data, PrivacyLeakWarning is a blocker.\")"
     ]
    }
   ],
   "source": [
    "# Expect PrivacyLeakWarning Error\n",
    "dummy_response = client.diffprivlib.query(\n",
    "    pipeline = dpl_pipeline,\n",
    "    feature_columns =  feature_columns,\n",
    "    target_columns = target_columns,\n",
    "    dummy = True\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c9d58006-89d5-4110-9657-641256bafaf9",
   "metadata": {},
   "source": [
    "Diffprivlib requests that have **PrivacyLeakWarning** will not be processed in the server. \n",
    "In lomas, the bounds must always be specified. For most model, it is best to use **the standard scaler must always be used as a first step** and fill it based on the metadata values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "87384eb3-6b6c-44f8-b653-af471b234a2d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:09:42.990679Z",
     "iopub.status.busy": "2025-05-01T08:09:42.990509Z",
     "iopub.status.idle": "2025-05-01T08:09:42.995548Z",
     "shell.execute_reply": "2025-05-01T08:09:42.995202Z"
    }
   },
   "outputs": [],
   "source": [
    "def get_bounds(cols_metadata, columns):\n",
    "    lower = [cols_metadata[col][\"lower\"] for col in columns]\n",
    "    upper = [cols_metadata[col][\"upper\"] for col in columns]\n",
    "    return (lower, upper)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "12d1faa1-f88a-49bb-911a-83f879ca10b6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:09:42.999294Z",
     "iopub.status.busy": "2025-05-01T08:09:42.997554Z",
     "iopub.status.idle": "2025-05-01T08:09:43.008180Z",
     "shell.execute_reply": "2025-05-01T08:09:43.006598Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([30.0, 13.0, 150.0, 2000.0], [65.0, 23.0, 250.0, 7000.0])"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bounds = get_bounds(penguin_metadata['columns'], columns=feature_columns)\n",
    "bounds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "1ca11e06-0b1e-4238-a5c1-1e52a6569431",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:09:43.012519Z",
     "iopub.status.busy": "2025-05-01T08:09:43.009431Z",
     "iopub.status.idle": "2025-05-01T08:09:43.015697Z",
     "shell.execute_reply": "2025-05-01T08:09:43.015345Z"
    }
   },
   "outputs": [],
   "source": [
    "dpl_pipeline = Pipeline([\n",
    "    ('scaler', models.StandardScaler(epsilon = 0.5, bounds=bounds)),\n",
    "    ('classifier', models.LogisticRegression(epsilon = 1.0))\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "235d7da6-f6bd-4e71-9b07-84cbe283b74e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:09:43.020979Z",
     "iopub.status.busy": "2025-05-01T08:09:43.017237Z",
     "iopub.status.idle": "2025-05-01T08:09:44.303283Z",
     "shell.execute_reply": "2025-05-01T08:09:44.302835Z"
    },
    "tags": [
     "raises-exception"
    ]
   },
   "outputs": [
    {
     "ename": "ExternalLibraryException",
     "evalue": "(<DPLibraries.DIFFPRIVLIB: 'diffprivlib'>, 'PrivacyLeakWarning: Data norm has not been specified and will be calculated on the data provided.  This will result in additional privacy leakage. To ensure differential privacy and no additional privacy leakage, specify `data_norm` at initialisation.. Lomas server cannot fit pipeline on data, PrivacyLeakWarning is a blocker.')",
     "output_type": "error",
     "traceback": [
      "\u001b[31m---------------------------------------------------------------------------\u001b[39m",
      "\u001b[31mExternalLibraryException\u001b[39m                  Traceback (most recent call last)",
      "\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[16]\u001b[39m\u001b[32m, line 2\u001b[39m\n\u001b[32m      1\u001b[39m \u001b[38;5;66;03m# Expect PrivacyLeakWarning Error\u001b[39;00m\n\u001b[32m----> \u001b[39m\u001b[32m2\u001b[39m dummy_response = \u001b[43mclient\u001b[49m\u001b[43m.\u001b[49m\u001b[43mdiffprivlib\u001b[49m\u001b[43m.\u001b[49m\u001b[43mquery\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m      3\u001b[39m \u001b[43m    \u001b[49m\u001b[43mpipeline\u001b[49m\u001b[43m \u001b[49m\u001b[43m=\u001b[49m\u001b[43m \u001b[49m\u001b[43mdpl_pipeline\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m      4\u001b[39m \u001b[43m    \u001b[49m\u001b[43mfeature_columns\u001b[49m\u001b[43m \u001b[49m\u001b[43m=\u001b[49m\u001b[43m \u001b[49m\u001b[43mfeature_columns\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m      5\u001b[39m \u001b[43m    \u001b[49m\u001b[43mtarget_columns\u001b[49m\u001b[43m \u001b[49m\u001b[43m=\u001b[49m\u001b[43m \u001b[49m\u001b[43mtarget_columns\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m      6\u001b[39m \u001b[43m    \u001b[49m\u001b[43mdummy\u001b[49m\u001b[43m \u001b[49m\u001b[43m=\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\n\u001b[32m      7\u001b[39m \u001b[43m)\u001b[49m\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/work/sdd-poc-server/client/lomas_client/libraries/diffprivlib.py:142\u001b[39m, in \u001b[36mDiffPrivLibClient.query\u001b[39m\u001b[34m(self, pipeline, feature_columns, target_columns, test_size, test_train_split_seed, imputer_strategy, dummy, nb_rows, seed)\u001b[39m\n\u001b[32m    139\u001b[39m body = request_model.model_validate(body_dict)\n\u001b[32m    140\u001b[39m res = \u001b[38;5;28mself\u001b[39m.http_client.post(endpoint, body)\n\u001b[32m--> \u001b[39m\u001b[32m142\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mvalidate_model_response\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mhttp_client\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mres\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mQueryResponse\u001b[49m\u001b[43m)\u001b[49m\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/work/sdd-poc-server/client/lomas_client/utils.py:93\u001b[39m, in \u001b[36mvalidate_model_response\u001b[39m\u001b[34m(client, response, response_model)\u001b[39m\n\u001b[32m     91\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m job.status == \u001b[33m\"\u001b[39m\u001b[33mfailed\u001b[39m\u001b[33m\"\u001b[39m:\n\u001b[32m     92\u001b[39m     \u001b[38;5;28;01massert\u001b[39;00m job.error \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m, \u001b[33m\"\u001b[39m\u001b[33mjob \u001b[39m\u001b[38;5;132;01m{job_uid}\u001b[39;00m\u001b[33m failed without error !\u001b[39m\u001b[33m\"\u001b[39m\n\u001b[32m---> \u001b[39m\u001b[32m93\u001b[39m     \u001b[43mraise_error_from_model\u001b[49m\u001b[43m(\u001b[49m\u001b[43mjob\u001b[49m\u001b[43m.\u001b[49m\u001b[43merror\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m     95\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m response_model.model_validate(job.result)\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/work/sdd-poc-server/core/lomas_core/error_handler.py:150\u001b[39m, in \u001b[36mraise_error_from_model\u001b[39m\u001b[34m(error_model)\u001b[39m\n\u001b[32m    148\u001b[39m     \u001b[38;5;28;01mraise\u001b[39;00m InvalidQueryException(error_model.message)\n\u001b[32m    149\u001b[39m \u001b[38;5;28;01mcase\u001b[39;00m ExternalLibraryExceptionModel():\n\u001b[32m--> \u001b[39m\u001b[32m150\u001b[39m     \u001b[38;5;28;01mraise\u001b[39;00m ExternalLibraryException(error_model.library, error_model.message)\n\u001b[32m    151\u001b[39m \u001b[38;5;28;01mcase\u001b[39;00m UnauthorizedAccessExceptionModel():\n\u001b[32m    152\u001b[39m     \u001b[38;5;28;01mraise\u001b[39;00m UnauthorizedAccessException(error_model.message)\n",
      "\u001b[31mExternalLibraryException\u001b[39m: (<DPLibraries.DIFFPRIVLIB: 'diffprivlib'>, 'PrivacyLeakWarning: Data norm has not been specified and will be calculated on the data provided.  This will result in additional privacy leakage. To ensure differential privacy and no additional privacy leakage, specify `data_norm` at initialisation.. Lomas server cannot fit pipeline on data, PrivacyLeakWarning is a blocker.')"
     ]
    }
   ],
   "source": [
    "# Expect PrivacyLeakWarning Error\n",
    "dummy_response = client.diffprivlib.query(\n",
    "    pipeline = dpl_pipeline,\n",
    "    feature_columns = feature_columns,\n",
    "    target_columns = target_columns,\n",
    "    dummy = True\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c47aec3e-15ea-476d-9dcb-5b2f4888e355",
   "metadata": {},
   "source": [
    "Again, we have a Privacy Leak. For the same reason, the data_norm should be computed based on metadata and given as argument as explained in the error message."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "25a72ad9-d3f3-478a-8d33-c07bedbf4f66",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:09:44.305052Z",
     "iopub.status.busy": "2025-05-01T08:09:44.304736Z",
     "iopub.status.idle": "2025-05-01T08:09:44.308033Z",
     "shell.execute_reply": "2025-05-01T08:09:44.307252Z"
    }
   },
   "outputs": [],
   "source": [
    "# The max l2 norm of any row of the data. This defines the spread of data that will be protected by differential privacy.\n",
    "data_norm = np.sqrt(np.linalg.norm(bounds[1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "828a743e-960f-4713-a6ed-a0bd243a13e3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:09:44.309370Z",
     "iopub.status.busy": "2025-05-01T08:09:44.309227Z",
     "iopub.status.idle": "2025-05-01T08:09:44.311913Z",
     "shell.execute_reply": "2025-05-01T08:09:44.311582Z"
    }
   },
   "outputs": [],
   "source": [
    "dpl_pipeline = Pipeline([\n",
    "    ('scaler', models.StandardScaler(epsilon = 0.5, bounds=bounds)),\n",
    "    ('classifier', models.LogisticRegression(epsilon = 1.0, data_norm = data_norm))\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "c9c13dfe-0266-4cd8-b126-2accee6c1136",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:09:44.314088Z",
     "iopub.status.busy": "2025-05-01T08:09:44.313241Z",
     "iopub.status.idle": "2025-05-01T08:09:45.517322Z",
     "shell.execute_reply": "2025-05-01T08:09:45.516883Z"
    }
   },
   "outputs": [],
   "source": [
    "dummy_response = client.diffprivlib.query(\n",
    "    pipeline = dpl_pipeline,\n",
    "    feature_columns = feature_columns,\n",
    "    target_columns = target_columns,\n",
    "    dummy = True\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2ccdb7f5-5968-47e7-99d4-16067b8645a2",
   "metadata": {},
   "source": [
    "The pipeline worked, she can check that she has a dummy model and a dummy score associated. In the case of a Logistic Regression the score is a mean accuracy as specified [here](https://diffprivlib.readthedocs.io/en/latest/modules/models.html#diffprivlib.models.LogisticRegression.score).\n",
    "Each model return an associated score. The associated documentation is in the DiffPrivLib documentation in the `score` method of each model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "3c38f919-7ca1-455c-9b0f-bc2b56f60c0f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:09:45.519102Z",
     "iopub.status.busy": "2025-05-01T08:09:45.518769Z",
     "iopub.status.idle": "2025-05-01T08:09:45.537827Z",
     "shell.execute_reply": "2025-05-01T08:09:45.537417Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: #000;\n",
       "  --sklearn-color-text-muted: #666;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-1 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-1 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: flex;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "  align-items: start;\n",
       "  justify-content: space-between;\n",
       "  gap: 0.5em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label .caption {\n",
       "  font-size: 0.6rem;\n",
       "  font-weight: lighter;\n",
       "  color: var(--sklearn-color-text-muted);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-1 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-1 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 0.5em;\n",
       "  text-align: center;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-1 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;scaler&#x27;,\n",
       "                 StandardScaler(accountant=BudgetAccountant(spent_budget=[(0.5, 0)]),\n",
       "                                bounds=(array([  30.,   13.,  150., 2000.]),\n",
       "                                        array([  65.,   23.,  250., 7000.])),\n",
       "                                epsilon=0.5)),\n",
       "                (&#x27;classifier&#x27;,\n",
       "                 LogisticRegression(accountant=BudgetAccountant(spent_budget=[(1.0, 0)]),\n",
       "                                    data_norm=83.69469642643347))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>Pipeline</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.pipeline.Pipeline.html\">?<span>Documentation for Pipeline</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>Pipeline(steps=[(&#x27;scaler&#x27;,\n",
       "                 StandardScaler(accountant=BudgetAccountant(spent_budget=[(0.5, 0)]),\n",
       "                                bounds=(array([  30.,   13.,  150., 2000.]),\n",
       "                                        array([  65.,   23.,  250., 7000.])),\n",
       "                                epsilon=0.5)),\n",
       "                (&#x27;classifier&#x27;,\n",
       "                 LogisticRegression(accountant=BudgetAccountant(spent_budget=[(1.0, 0)]),\n",
       "                                    data_norm=83.69469642643347))])</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>StandardScaler</div></div></label><div class=\"sk-toggleable__content fitted\"><pre>StandardScaler(accountant=BudgetAccountant(spent_budget=[(0.5, 0)]),\n",
       "               bounds=(array([  30.,   13.,  150., 2000.]),\n",
       "                       array([  65.,   23.,  250., 7000.])),\n",
       "               epsilon=0.5)</pre></div> </div></div><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>LogisticRegression</div></div></label><div class=\"sk-toggleable__content fitted\"><pre>LogisticRegression(accountant=BudgetAccountant(spent_budget=[(1.0, 0)]),\n",
       "                   data_norm=83.69469642643347)</pre></div> </div></div></div></div></div></div>"
      ],
      "text/plain": [
       "Pipeline(steps=[('scaler',\n",
       "                 StandardScaler(accountant=BudgetAccountant(spent_budget=[(0.5, 0)]),\n",
       "                                bounds=(array([  30.,   13.,  150., 2000.]),\n",
       "                                        array([  65.,   23.,  250., 7000.])),\n",
       "                                epsilon=0.5)),\n",
       "                ('classifier',\n",
       "                 LogisticRegression(accountant=BudgetAccountant(spent_budget=[(1.0, 0)]),\n",
       "                                    data_norm=83.69469642643347))])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dummy_response.result.model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a61629d-b96f-4114-8bc2-eccf34d69d2b",
   "metadata": {},
   "source": [
    "Now that the pipeline seems to work, she also wants to choose another data imputation method: be default the missing data are dropped but she wants the replace them with the mean. Therefore, she uses the `imputer_strategy` argument."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "547935ca-0932-4476-8ace-3644c7e0a08d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:09:45.539574Z",
     "iopub.status.busy": "2025-05-01T08:09:45.539222Z",
     "iopub.status.idle": "2025-05-01T08:09:47.183446Z",
     "shell.execute_reply": "2025-05-01T08:09:47.183017Z"
    }
   },
   "outputs": [],
   "source": [
    "dummy_response = client.diffprivlib.query(\n",
    "    pipeline = dpl_pipeline,\n",
    "    feature_columns = feature_columns,\n",
    "    target_columns = target_columns,\n",
    "    imputer_strategy = \"mean\",\n",
    "    dummy = True\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4587385a-b76e-45f4-a1d9-af0a88a1181f",
   "metadata": {},
   "source": [
    "It also works. It she wanted she could replace by the mean value with `imputer_strategy = \"mean\"` or the most frequent value with `imputer_strategy = \"most_frequent\"` (most_frequent makes more sense in the case of categorical columns). "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "381cd096-bde3-474b-b24d-7fcb4c6ae49f",
   "metadata": {},
   "source": [
    "Finally, she wants to use as much data as possible to train the model so she decides to reduce the `test_size` to 0.1 (meaning that 10% of the data will be used as the test set and 90% and the training set). Also she modifies the seed for the random split between training and testing data `test_train_split_seed` because why not. By default `test_size = 0.2` and `test_train_split_seed = 1`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "73e8b9ab-2d93-4333-ace3-c94c714410dc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:09:47.185414Z",
     "iopub.status.busy": "2025-05-01T08:09:47.185072Z",
     "iopub.status.idle": "2025-05-01T08:09:47.370765Z",
     "shell.execute_reply": "2025-05-01T08:09:47.370415Z"
    }
   },
   "outputs": [],
   "source": [
    "dummy_response = client.diffprivlib.query(\n",
    "    pipeline = dpl_pipeline,\n",
    "    feature_columns = feature_columns,\n",
    "    target_columns = target_columns,\n",
    "    test_size = 0.1,\n",
    "    test_train_split_seed = 4,\n",
    "    imputer_strategy = \"mean\",\n",
    "    dummy = True\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4f9c2330-15f3-46f9-94c1-d62ea350e2e8",
   "metadata": {},
   "source": [
    "#### She can now estimated the cost of this pipeline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "e036b55f-6c3d-4212-8d91-9ece8223cf69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:09:47.372645Z",
     "iopub.status.busy": "2025-05-01T08:09:47.372482Z",
     "iopub.status.idle": "2025-05-01T08:09:49.242639Z",
     "shell.execute_reply": "2025-05-01T08:09:49.242263Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "CostResponse(epsilon=1.5, delta=0.0)"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res = client.diffprivlib.cost(\n",
    "    dpl_pipeline,\n",
    "    feature_columns = feature_columns,\n",
    "    target_columns = target_columns,\n",
    "    test_size = 0.1,\n",
    "    test_train_split_seed = 4,\n",
    "    imputer_strategy = \"mean\",\n",
    ")\n",
    "res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "4398755f-348f-47e2-9329-80c34897e16b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:09:49.244365Z",
     "iopub.status.busy": "2025-05-01T08:09:49.244206Z",
     "iopub.status.idle": "2025-05-01T08:09:49.248557Z",
     "shell.execute_reply": "2025-05-01T08:09:49.248239Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'The cost will be 1.5 epsilon and 0.0 delta.'"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f\"The cost will be {res.epsilon} epsilon and {res.delta} delta.\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8aad5f86-20f7-42fe-8efd-56c96f6beb41",
   "metadata": {},
   "source": [
    "Now we train the same pipeline on the real dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "b823db85-d993-4a36-9dea-bf5989c543f8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:09:49.250923Z",
     "iopub.status.busy": "2025-05-01T08:09:49.250349Z",
     "iopub.status.idle": "2025-05-01T08:09:51.344665Z",
     "shell.execute_reply": "2025-05-01T08:09:51.343800Z"
    }
   },
   "outputs": [],
   "source": [
    "res = client.diffprivlib.query(\n",
    "    pipeline = dpl_pipeline,\n",
    "    feature_columns = feature_columns,\n",
    "    target_columns = target_columns,\n",
    "    test_size = 0.1,\n",
    "    test_train_split_seed = 4,\n",
    "    imputer_strategy = \"mean\",\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "6c071425-5364-4d79-8ccf-4f46018ac849",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:09:51.346490Z",
     "iopub.status.busy": "2025-05-01T08:09:51.346308Z",
     "iopub.status.idle": "2025-05-01T08:09:51.349198Z",
     "shell.execute_reply": "2025-05-01T08:09:51.348894Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'The accuracy score of the model trained on real data is 0.14285714285714285.'"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f\"The accuracy score of the model trained on real data is {res.result.score}.\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9cea3fc7-4331-4387-a19f-6afcaa21b6bc",
   "metadata": {},
   "source": [
    "The model is with different trained parameters is also available:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "b646cd08-504b-4846-88ba-a3557ee4b2fd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:09:51.350458Z",
     "iopub.status.busy": "2025-05-01T08:09:51.350313Z",
     "iopub.status.idle": "2025-05-01T08:09:51.353191Z",
     "shell.execute_reply": "2025-05-01T08:09:51.352132Z"
    }
   },
   "outputs": [],
   "source": [
    "model = res.result.model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a581f47d-f1c7-4121-9f8f-e496e9023d58",
   "metadata": {},
   "source": [
    "We predict what would be the specie of the smallest possible penguin in all dimension versus to biggest possible penguin in all dimensions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "65413ef0-317b-431d-9ed8-6ffabe85c1b2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:09:51.354411Z",
     "iopub.status.busy": "2025-05-01T08:09:51.354260Z",
     "iopub.status.idle": "2025-05-01T08:09:51.365636Z",
     "shell.execute_reply": "2025-05-01T08:09:51.365281Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>bill_length_mm</th>\n",
       "      <th>bill_depth_mm</th>\n",
       "      <th>flipper_length_mm</th>\n",
       "      <th>body_mass_g</th>\n",
       "      <th>predictions</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>30.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>150.0</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>Gentoo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>65.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>250.0</td>\n",
       "      <td>7000.0</td>\n",
       "      <td>Adelie</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   bill_length_mm  bill_depth_mm  flipper_length_mm  body_mass_g predictions\n",
       "0            30.0           13.0              150.0       2000.0      Gentoo\n",
       "1            65.0           23.0              250.0       7000.0      Adelie"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_to_predict = pd.DataFrame({\n",
    "    'bill_length_mm': [bounds[0][0], bounds[1][0]], \n",
    "    'bill_depth_mm': [bounds[0][1], bounds[1][1]] , \n",
    "    'flipper_length_mm': [bounds[0][2], bounds[1][2]], \n",
    "    'body_mass_g': [bounds[0][3], bounds[1][3]]\n",
    "})\n",
    "\n",
    "predictions = model.predict(x_to_predict)\n",
    "x_to_predict[\"predictions\"] = predictions\n",
    "x_to_predict"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "839ba199-3014-4e39-8f0a-aecf15241b11",
   "metadata": {},
   "source": [
    "## Step 5: Train other models with DiffPrivLib"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4f161f96-e240-45b2-bb60-002870196158",
   "metadata": {},
   "source": [
    "The logic is always the same for all the models. The `pipeline` and `feature_columns` arguments must always be specified for all models. The `target_columns` must be specified except for Clustering (K-Means) and Dimensinnality reduction (PCA).\n",
    "\n",
    "Here are examples of each on dummy dataframes."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fef35343-cdf6-4e86-a54a-4bcf6568f2ac",
   "metadata": {},
   "source": [
    "### Classification: Gaussian Naive Bayes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "f8a5ddc0-61bb-44c0-a14b-5ac3278ff539",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:09:51.366799Z",
     "iopub.status.busy": "2025-05-01T08:09:51.366657Z",
     "iopub.status.idle": "2025-05-01T08:09:51.369189Z",
     "shell.execute_reply": "2025-05-01T08:09:51.368851Z"
    }
   },
   "outputs": [],
   "source": [
    "feature_columns = ['bill_length_mm', 'bill_depth_mm', 'flipper_length_mm']\n",
    "target_columns = ['species']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "4f4b9789-7da1-4abe-9dd6-dd1472a4e217",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:09:51.370576Z",
     "iopub.status.busy": "2025-05-01T08:09:51.370430Z",
     "iopub.status.idle": "2025-05-01T08:09:51.373563Z",
     "shell.execute_reply": "2025-05-01T08:09:51.372729Z"
    }
   },
   "outputs": [],
   "source": [
    "bounds = get_bounds(penguin_metadata['columns'], columns=feature_columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "9dd37857-0ef2-44d5-b206-092262c9cea1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:09:51.374884Z",
     "iopub.status.busy": "2025-05-01T08:09:51.374731Z",
     "iopub.status.idle": "2025-05-01T08:09:51.377874Z",
     "shell.execute_reply": "2025-05-01T08:09:51.377138Z"
    }
   },
   "outputs": [],
   "source": [
    "dpl_pipeline = Pipeline([\n",
    "    ('scaler', models.StandardScaler(epsilon = 0.5, bounds=bounds)),\n",
    "    ('gaussian', models.GaussianNB(epsilon = 1.0, bounds=bounds, priors = (0.3, 0.3, 0.4))),\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "8e2c07c6-20f4-473c-80f6-b4b558191530",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:09:51.379350Z",
     "iopub.status.busy": "2025-05-01T08:09:51.379067Z",
     "iopub.status.idle": "2025-05-01T08:09:51.644223Z",
     "shell.execute_reply": "2025-05-01T08:09:51.641799Z"
    }
   },
   "outputs": [],
   "source": [
    "dummy_response = client.diffprivlib.query(\n",
    "    pipeline = dpl_pipeline,\n",
    "    feature_columns = feature_columns,\n",
    "    target_columns = target_columns,\n",
    "    test_size = 0.15,\n",
    "    imputer_strategy = \"median\",\n",
    "    dummy = True\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "550868df-5476-496e-849d-8787da9eb27e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:09:51.650652Z",
     "iopub.status.busy": "2025-05-01T08:09:51.649528Z",
     "iopub.status.idle": "2025-05-01T08:09:53.130421Z",
     "shell.execute_reply": "2025-05-01T08:09:53.129604Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "CostResponse(epsilon=1.5, delta=0.0)"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cost_res = client.diffprivlib.cost(\n",
    "    dpl_pipeline,\n",
    "    feature_columns = feature_columns,\n",
    "    target_columns = target_columns,\n",
    "    test_size = 0.15,\n",
    "    imputer_strategy = \"median\",\n",
    ")\n",
    "cost_res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "934a1237-68d1-4796-838e-e8c370068f5d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:09:53.132180Z",
     "iopub.status.busy": "2025-05-01T08:09:53.131895Z",
     "iopub.status.idle": "2025-05-01T08:09:54.668337Z",
     "shell.execute_reply": "2025-05-01T08:09:54.665989Z"
    }
   },
   "outputs": [],
   "source": [
    "response = client.diffprivlib.query(\n",
    "    pipeline = dpl_pipeline,\n",
    "    feature_columns = feature_columns,\n",
    "    target_columns = target_columns,\n",
    "    imputer_strategy = \"median\",\n",
    "    test_size = 0.15,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "81708812-897a-4357-af06-139220538831",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:09:54.676281Z",
     "iopub.status.busy": "2025-05-01T08:09:54.676019Z",
     "iopub.status.idle": "2025-05-01T08:09:54.685110Z",
     "shell.execute_reply": "2025-05-01T08:09:54.684691Z"
    }
   },
   "outputs": [],
   "source": [
    "x_to_predict = pd.DataFrame({\n",
    "    'bill_length_mm': [bounds[0][0], bounds[1][0]], \n",
    "    'bill_depth_mm': [bounds[0][1], bounds[1][1]] , \n",
    "    'flipper_length_mm': [bounds[0][2], bounds[1][2]], \n",
    "})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "ec3c98d3-cb5d-4a96-9ada-ea9904326aec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:09:54.689077Z",
     "iopub.status.busy": "2025-05-01T08:09:54.687001Z",
     "iopub.status.idle": "2025-05-01T08:09:54.705788Z",
     "shell.execute_reply": "2025-05-01T08:09:54.704570Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>bill_length_mm</th>\n",
       "      <th>bill_depth_mm</th>\n",
       "      <th>flipper_length_mm</th>\n",
       "      <th>predictions</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>30.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>150.0</td>\n",
       "      <td>Chinstrap</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>65.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>250.0</td>\n",
       "      <td>Chinstrap</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   bill_length_mm  bill_depth_mm  flipper_length_mm predictions\n",
       "0            30.0           13.0              150.0   Chinstrap\n",
       "1            65.0           23.0              250.0   Chinstrap"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predictions = response.result.model.predict(x_to_predict)\n",
    "x_to_predict[\"predictions\"] = predictions\n",
    "x_to_predict"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c1224c94-d995-40f1-967d-b7afb21bce48",
   "metadata": {},
   "source": [
    "### Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "980f4494-4b1f-4cb0-b288-ddc672231b1f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:09:54.710261Z",
     "iopub.status.busy": "2025-05-01T08:09:54.709879Z",
     "iopub.status.idle": "2025-05-01T08:09:54.716032Z",
     "shell.execute_reply": "2025-05-01T08:09:54.715630Z"
    }
   },
   "outputs": [],
   "source": [
    "feature_columns = ['bill_length_mm', 'bill_depth_mm', 'body_mass_g']\n",
    "target_columns = ['island']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "e91f9a5c-14ea-4e48-8e42-fa50152767b7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:09:54.717458Z",
     "iopub.status.busy": "2025-05-01T08:09:54.717314Z",
     "iopub.status.idle": "2025-05-01T08:09:54.721175Z",
     "shell.execute_reply": "2025-05-01T08:09:54.720733Z"
    }
   },
   "outputs": [],
   "source": [
    "bounds = get_bounds(penguin_metadata['columns'], columns=feature_columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "d4f036a7-0405-4f4b-a4a0-3fe1b0b8d4d0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:09:54.724172Z",
     "iopub.status.busy": "2025-05-01T08:09:54.723728Z",
     "iopub.status.idle": "2025-05-01T08:09:54.730094Z",
     "shell.execute_reply": "2025-05-01T08:09:54.729712Z"
    }
   },
   "outputs": [],
   "source": [
    "dpl_pipeline = Pipeline([\n",
    "    (\n",
    "        'rf', \n",
    "        models.RandomForestClassifier(\n",
    "            n_estimators=10, \n",
    "            epsilon = 2.0, \n",
    "            bounds=bounds, \n",
    "            classes=penguin_metadata['columns']['island']['categories']\n",
    "        )\n",
    "    ),\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "c969d488-e1a2-445a-a269-681d96343b9f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:09:54.731715Z",
     "iopub.status.busy": "2025-05-01T08:09:54.731523Z",
     "iopub.status.idle": "2025-05-01T08:09:56.522524Z",
     "shell.execute_reply": "2025-05-01T08:09:56.522101Z"
    }
   },
   "outputs": [],
   "source": [
    "dummy_response = client.diffprivlib.query(\n",
    "    pipeline = dpl_pipeline,\n",
    "    feature_columns = feature_columns,\n",
    "    target_columns = target_columns,\n",
    "    imputer_strategy = \"drop\", #default\n",
    "    dummy = True\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "de94f0a5-6e9d-4eac-aa77-b98892ed41fc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:09:56.524333Z",
     "iopub.status.busy": "2025-05-01T08:09:56.524003Z",
     "iopub.status.idle": "2025-05-01T08:09:58.019795Z",
     "shell.execute_reply": "2025-05-01T08:09:58.018739Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "CostResponse(epsilon=2.0, delta=0.0)"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cost_res = client.diffprivlib.cost(\n",
    "    dpl_pipeline,\n",
    "    feature_columns = feature_columns,\n",
    "    target_columns = target_columns,\n",
    "    imputer_strategy = \"drop\", #default\n",
    ")\n",
    "cost_res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "40f25e33-a644-4938-8adb-a7bbe5306ee2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:09:58.023790Z",
     "iopub.status.busy": "2025-05-01T08:09:58.023621Z",
     "iopub.status.idle": "2025-05-01T08:09:59.500357Z",
     "shell.execute_reply": "2025-05-01T08:09:59.499917Z"
    }
   },
   "outputs": [],
   "source": [
    "response = client.diffprivlib.query(\n",
    "    pipeline = dpl_pipeline,\n",
    "    feature_columns = feature_columns,\n",
    "    target_columns = target_columns,\n",
    "    imputer_strategy = \"drop\", #default\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "4f5fad30-991e-45f3-a7e3-1ae04bedd8a1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:09:59.502191Z",
     "iopub.status.busy": "2025-05-01T08:09:59.501854Z",
     "iopub.status.idle": "2025-05-01T08:09:59.505074Z",
     "shell.execute_reply": "2025-05-01T08:09:59.504346Z"
    }
   },
   "outputs": [],
   "source": [
    "model = response.result.model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "96562928-73e8-48b1-b8a5-97245c7da8d2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:09:59.506400Z",
     "iopub.status.busy": "2025-05-01T08:09:59.506259Z",
     "iopub.status.idle": "2025-05-01T08:09:59.516322Z",
     "shell.execute_reply": "2025-05-01T08:09:59.515979Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>bill_length_mm</th>\n",
       "      <th>bill_depth_mm</th>\n",
       "      <th>body_mass_g</th>\n",
       "      <th>predictions</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>30.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>Dream</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>65.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>7000.0</td>\n",
       "      <td>Torgersen</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   bill_length_mm  bill_depth_mm  body_mass_g predictions\n",
       "0            30.0           13.0       2000.0       Dream\n",
       "1            65.0           23.0       7000.0   Torgersen"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_to_predict = pd.DataFrame({\n",
    "    'bill_length_mm': [bounds[0][0], bounds[1][0]], \n",
    "    'bill_depth_mm': [bounds[0][1], bounds[1][1]] , \n",
    "    'body_mass_g': [bounds[0][2], bounds[1][2]]\n",
    "})\n",
    "predictions = model.predict(x_to_predict)\n",
    "x_to_predict[\"predictions\"] = predictions\n",
    "x_to_predict"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "020ceeb1-7a78-4036-8ece-0afa88e49342",
   "metadata": {},
   "source": [
    "### Decision Tree Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "c5400d29-8303-4714-8617-8a2b26b0aa2e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:09:59.517676Z",
     "iopub.status.busy": "2025-05-01T08:09:59.517534Z",
     "iopub.status.idle": "2025-05-01T08:09:59.520809Z",
     "shell.execute_reply": "2025-05-01T08:09:59.519864Z"
    }
   },
   "outputs": [],
   "source": [
    "feature_columns = ['bill_length_mm', 'body_mass_g']\n",
    "target_columns = ['species']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "1760f475-6326-41e5-945a-66882183bc00",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:09:59.521982Z",
     "iopub.status.busy": "2025-05-01T08:09:59.521830Z",
     "iopub.status.idle": "2025-05-01T08:09:59.524742Z",
     "shell.execute_reply": "2025-05-01T08:09:59.524055Z"
    }
   },
   "outputs": [],
   "source": [
    "bounds = get_bounds(penguin_metadata['columns'], columns=feature_columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "22b5c5ae-b008-4980-8767-47e7a1ad3301",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:09:59.526037Z",
     "iopub.status.busy": "2025-05-01T08:09:59.525884Z",
     "iopub.status.idle": "2025-05-01T08:09:59.528960Z",
     "shell.execute_reply": "2025-05-01T08:09:59.528235Z"
    }
   },
   "outputs": [],
   "source": [
    "dpl_pipeline = Pipeline([\n",
    "    (\n",
    "        'dtc', \n",
    "        models.DecisionTreeClassifier(\n",
    "            epsilon = 2.0, \n",
    "            bounds=bounds, \n",
    "            classes=penguin_metadata['columns']['species']['categories']\n",
    "        )\n",
    "    ),\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "70b73ba0-67dc-4594-820c-0128916fafc8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:09:59.530133Z",
     "iopub.status.busy": "2025-05-01T08:09:59.529993Z",
     "iopub.status.idle": "2025-05-01T08:09:59.628246Z",
     "shell.execute_reply": "2025-05-01T08:09:59.627408Z"
    }
   },
   "outputs": [],
   "source": [
    "dummy_response = client.diffprivlib.query(\n",
    "    pipeline = dpl_pipeline,\n",
    "    feature_columns = feature_columns,\n",
    "    target_columns = target_columns,\n",
    "    test_size = 0.2,\n",
    "    test_train_split_seed = 1,\n",
    "    dummy = True,\n",
    "    nb_rows = 100,\n",
    "    seed = 42\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "736e8283-604a-4e45-9e98-7da5cc03e1b0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:09:59.630493Z",
     "iopub.status.busy": "2025-05-01T08:09:59.630057Z",
     "iopub.status.idle": "2025-05-01T08:10:01.298852Z",
     "shell.execute_reply": "2025-05-01T08:10:01.298433Z"
    }
   },
   "outputs": [],
   "source": [
    "response = client.diffprivlib.query(\n",
    "    pipeline = dpl_pipeline,\n",
    "    feature_columns = feature_columns,\n",
    "    target_columns = target_columns,\n",
    "    test_size = 0.2,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "66bfe1a9-7982-4d6b-ac0b-32a4412f29bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:01.300965Z",
     "iopub.status.busy": "2025-05-01T08:10:01.300751Z",
     "iopub.status.idle": "2025-05-01T08:10:01.303672Z",
     "shell.execute_reply": "2025-05-01T08:10:01.303349Z"
    }
   },
   "outputs": [],
   "source": [
    "model = response.result.model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "a3719359-58a6-4271-9a34-4b49e0d7188e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:01.305262Z",
     "iopub.status.busy": "2025-05-01T08:10:01.305116Z",
     "iopub.status.idle": "2025-05-01T08:10:01.313858Z",
     "shell.execute_reply": "2025-05-01T08:10:01.313536Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>bill_length_mm</th>\n",
       "      <th>body_mass_g</th>\n",
       "      <th>predictions</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>30.0</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>Adelie</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>65.0</td>\n",
       "      <td>7000.0</td>\n",
       "      <td>Chinstrap</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   bill_length_mm  body_mass_g predictions\n",
       "0            30.0       2000.0      Adelie\n",
       "1            65.0       7000.0   Chinstrap"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_to_predict = pd.DataFrame({\n",
    "    'bill_length_mm': [bounds[0][0], bounds[1][0]], \n",
    "    'body_mass_g': [bounds[0][1], bounds[1][1]] , \n",
    "})\n",
    "x_to_predict[\"predictions\"] = model.predict(x_to_predict)\n",
    "x_to_predict"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4e72e9fc-bb5b-49d9-b4e6-543bdaf93f69",
   "metadata": {},
   "source": [
    "### Regression: Linear Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "c893cbb0-26b7-4367-ab67-1ccc88f951ed",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:01.315896Z",
     "iopub.status.busy": "2025-05-01T08:10:01.315330Z",
     "iopub.status.idle": "2025-05-01T08:10:01.318029Z",
     "shell.execute_reply": "2025-05-01T08:10:01.317707Z"
    }
   },
   "outputs": [],
   "source": [
    "feature_columns = ['bill_length_mm']\n",
    "target_columns = ['bill_depth_mm']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "c7c66418-74b3-4887-bb99-3d8b6ea7af3d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:01.319406Z",
     "iopub.status.busy": "2025-05-01T08:10:01.319265Z",
     "iopub.status.idle": "2025-05-01T08:10:01.322202Z",
     "shell.execute_reply": "2025-05-01T08:10:01.321821Z"
    }
   },
   "outputs": [],
   "source": [
    "bill_length_meta = penguin_metadata['columns']['bill_length_mm']\n",
    "bill_depth_meta = penguin_metadata['columns']['bill_depth_mm']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "907e6f6c-a3da-4f7c-8d85-b0a7b8c018d1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:01.324270Z",
     "iopub.status.busy": "2025-05-01T08:10:01.323599Z",
     "iopub.status.idle": "2025-05-01T08:10:01.326852Z",
     "shell.execute_reply": "2025-05-01T08:10:01.326544Z"
    }
   },
   "outputs": [],
   "source": [
    "dpl_pipeline = Pipeline([\n",
    "    (\n",
    "        'lr', \n",
    "        models.LinearRegression(\n",
    "            epsilon = 2.0, \n",
    "            bounds_X=(bill_length_meta['lower'], bill_length_meta['upper']), \n",
    "            bounds_y=(bill_depth_meta['lower'], bill_depth_meta['upper'])\n",
    "        )\n",
    "    ),\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "58011a7d-7c03-4872-a032-5d93c55c1d5f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:01.329920Z",
     "iopub.status.busy": "2025-05-01T08:10:01.328332Z",
     "iopub.status.idle": "2025-05-01T08:10:01.976428Z",
     "shell.execute_reply": "2025-05-01T08:10:01.976004Z"
    }
   },
   "outputs": [],
   "source": [
    "dummy_response = client.diffprivlib.query(\n",
    "    pipeline = dpl_pipeline,\n",
    "    feature_columns = feature_columns,\n",
    "    target_columns = target_columns,\n",
    "    dummy = True\n",
    ")\n",
    "model = dummy_response.result.model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "e28b1bd0-0e73-49db-a2d3-e7f06dc39d49",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:01.978480Z",
     "iopub.status.busy": "2025-05-01T08:10:01.978297Z",
     "iopub.status.idle": "2025-05-01T08:10:01.986459Z",
     "shell.execute_reply": "2025-05-01T08:10:01.985720Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>bill_length_mm</th>\n",
       "      <th>predictions</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>30.0</td>\n",
       "      <td>14.625497</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>65.0</td>\n",
       "      <td>21.418738</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   bill_length_mm  predictions\n",
       "0            30.0    14.625497\n",
       "1            65.0    21.418738"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Dummy model predictions\n",
    "x_to_predict = pd.DataFrame({\n",
    "    'bill_length_mm': [bill_length_meta['lower'], bill_length_meta['upper']], \n",
    "})\n",
    "x_to_predict[\"predictions\"] = model.predict(x_to_predict)\n",
    "x_to_predict"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ec9e921d-1640-4379-84e5-65b93a1ff203",
   "metadata": {},
   "source": [
    "### Clustering: K-Means"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "2491d06f-3c40-4649-b419-ccd9b39f0764",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:01.987859Z",
     "iopub.status.busy": "2025-05-01T08:10:01.987703Z",
     "iopub.status.idle": "2025-05-01T08:10:01.990746Z",
     "shell.execute_reply": "2025-05-01T08:10:01.990028Z"
    }
   },
   "outputs": [],
   "source": [
    "feature_columns = ['bill_length_mm', 'bill_depth_mm', 'flipper_length_mm', 'body_mass_g']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "10acc43d-ff2e-4d7a-9c52-361ffb80e0da",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:01.992270Z",
     "iopub.status.busy": "2025-05-01T08:10:01.991868Z",
     "iopub.status.idle": "2025-05-01T08:10:01.994935Z",
     "shell.execute_reply": "2025-05-01T08:10:01.994149Z"
    }
   },
   "outputs": [],
   "source": [
    "bounds = get_bounds(penguin_metadata['columns'], columns=feature_columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "1e830a01-7800-4701-aef2-11dbfc517f61",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:01.996444Z",
     "iopub.status.busy": "2025-05-01T08:10:01.996298Z",
     "iopub.status.idle": "2025-05-01T08:10:01.998963Z",
     "shell.execute_reply": "2025-05-01T08:10:01.998599Z"
    }
   },
   "outputs": [],
   "source": [
    "dpl_pipeline = Pipeline([\n",
    "    ('kmeans', models.KMeans(n_clusters = 8, epsilon = 2.0, bounds=bounds)),\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "cb5e3e1f-2d48-4d5e-992a-c0e0cb6add3b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:02.000154Z",
     "iopub.status.busy": "2025-05-01T08:10:02.000015Z",
     "iopub.status.idle": "2025-05-01T08:10:03.294458Z",
     "shell.execute_reply": "2025-05-01T08:10:03.294079Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: #000;\n",
       "  --sklearn-color-text-muted: #666;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-2 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-2 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-2 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: flex;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "  align-items: start;\n",
       "  justify-content: space-between;\n",
       "  gap: 0.5em;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 label.sk-toggleable__label .caption {\n",
       "  font-size: 0.6rem;\n",
       "  font-weight: lighter;\n",
       "  color: var(--sklearn-color-text-muted);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-2 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-2 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-2 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-2 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 0.5em;\n",
       "  text-align: center;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-2 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;kmeans&#x27;,\n",
       "                 KMeans(accountant=BudgetAccountant(spent_budget=[(2.0, 0)]),\n",
       "                        bounds=(array([  30.,   13.,  150., 2000.]),\n",
       "                                array([  65.,   23.,  250., 7000.])),\n",
       "                        epsilon=2.0))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>Pipeline</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.pipeline.Pipeline.html\">?<span>Documentation for Pipeline</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>Pipeline(steps=[(&#x27;kmeans&#x27;,\n",
       "                 KMeans(accountant=BudgetAccountant(spent_budget=[(2.0, 0)]),\n",
       "                        bounds=(array([  30.,   13.,  150., 2000.]),\n",
       "                                array([  65.,   23.,  250., 7000.])),\n",
       "                        epsilon=2.0))])</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>KMeans</div></div></label><div class=\"sk-toggleable__content fitted\"><pre>KMeans(accountant=BudgetAccountant(spent_budget=[(2.0, 0)]),\n",
       "       bounds=(array([  30.,   13.,  150., 2000.]),\n",
       "               array([  65.,   23.,  250., 7000.])),\n",
       "       epsilon=2.0)</pre></div> </div></div></div></div></div></div>"
      ],
      "text/plain": [
       "Pipeline(steps=[('kmeans',\n",
       "                 KMeans(accountant=BudgetAccountant(spent_budget=[(2.0, 0)]),\n",
       "                        bounds=(array([  30.,   13.,  150., 2000.]),\n",
       "                                array([  65.,   23.,  250., 7000.])),\n",
       "                        epsilon=2.0))])"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dummy_response = client.diffprivlib.query(\n",
    "    pipeline = dpl_pipeline,\n",
    "    feature_columns = feature_columns,\n",
    "    dummy = True\n",
    ")\n",
    "model = dummy_response.result.model\n",
    "model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "a0612b10-de7a-4355-8268-09a46c30056a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:03.296697Z",
     "iopub.status.busy": "2025-05-01T08:10:03.296503Z",
     "iopub.status.idle": "2025-05-01T08:10:03.356848Z",
     "shell.execute_reply": "2025-05-01T08:10:03.355379Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>bill_length_mm</th>\n",
       "      <th>bill_depth_mm</th>\n",
       "      <th>flipper_length_mm</th>\n",
       "      <th>body_mass_g</th>\n",
       "      <th>predictions</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>30.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>150.0</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>65.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>250.0</td>\n",
       "      <td>7000.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   bill_length_mm  bill_depth_mm  flipper_length_mm  body_mass_g  predictions\n",
       "0            30.0           13.0              150.0       2000.0            7\n",
       "1            65.0           23.0              250.0       7000.0            2"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Dummy model predictions\n",
    "x_to_predict = pd.DataFrame({\n",
    "    'bill_length_mm': [bounds[0][0], bounds[1][0]], \n",
    "    'bill_depth_mm': [bounds[0][1], bounds[1][1]] , \n",
    "    'flipper_length_mm': [bounds[0][2], bounds[1][2]], \n",
    "    'body_mass_g': [bounds[0][3], bounds[1][3]]\n",
    "})\n",
    "x_to_predict[\"predictions\"] = model.predict(x_to_predict)\n",
    "x_to_predict"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6021b034-b15d-4826-8de3-80b99afc838d",
   "metadata": {},
   "source": [
    "### Dimensionality Reduction: PCA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "fd8347be-5951-419d-820c-26655db5ea8c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:03.358663Z",
     "iopub.status.busy": "2025-05-01T08:10:03.358353Z",
     "iopub.status.idle": "2025-05-01T08:10:03.361962Z",
     "shell.execute_reply": "2025-05-01T08:10:03.360922Z"
    }
   },
   "outputs": [],
   "source": [
    "feature_columns = ['bill_length_mm', 'bill_depth_mm', 'flipper_length_mm', 'body_mass_g']\n",
    "bounds = get_bounds(penguin_metadata['columns'], columns=feature_columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "f9a4cbaf-b994-41c0-a0e9-81674c6657fb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:03.363163Z",
     "iopub.status.busy": "2025-05-01T08:10:03.363022Z",
     "iopub.status.idle": "2025-05-01T08:10:03.366222Z",
     "shell.execute_reply": "2025-05-01T08:10:03.365457Z"
    }
   },
   "outputs": [],
   "source": [
    "dpl_pipeline = Pipeline([\n",
    "    (\n",
    "        'pca', \n",
    "        models.PCA(\n",
    "            n_components=None, \n",
    "            epsilon = 1.0, \n",
    "            bounds=bounds, \n",
    "            data_norm=100, \n",
    "            centered=False\n",
    "        )\n",
    "    ),\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "4681cc17-6285-4b9b-a26d-837d6a79e1c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:03.367498Z",
     "iopub.status.busy": "2025-05-01T08:10:03.367351Z",
     "iopub.status.idle": "2025-05-01T08:10:04.951428Z",
     "shell.execute_reply": "2025-05-01T08:10:04.950598Z"
    }
   },
   "outputs": [],
   "source": [
    "dummy_response = client.diffprivlib.query(\n",
    "    pipeline = dpl_pipeline,\n",
    "    feature_columns = feature_columns,\n",
    "    dummy = True\n",
    ")\n",
    "model = dummy_response.result.model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "e2d6912e-f97c-4ac6-9085-c7379136628c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:04.953398Z",
     "iopub.status.busy": "2025-05-01T08:10:04.953079Z",
     "iopub.status.idle": "2025-05-01T08:10:06.234552Z",
     "shell.execute_reply": "2025-05-01T08:10:06.233736Z"
    }
   },
   "outputs": [],
   "source": [
    "response = client.diffprivlib.query(\n",
    "    pipeline = dpl_pipeline,\n",
    "    feature_columns = feature_columns,\n",
    ")\n",
    "model = response.result.model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "e2c0cafa-49f6-48de-aa1a-4e84bbbf97cf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:06.236464Z",
     "iopub.status.busy": "2025-05-01T08:10:06.236038Z",
     "iopub.status.idle": "2025-05-01T08:10:06.243570Z",
     "shell.execute_reply": "2025-05-01T08:10:06.242827Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-3 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: #000;\n",
       "  --sklearn-color-text-muted: #666;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-3 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-3 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-3 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: flex;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "  align-items: start;\n",
       "  justify-content: space-between;\n",
       "  gap: 0.5em;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 label.sk-toggleable__label .caption {\n",
       "  font-size: 0.6rem;\n",
       "  font-weight: lighter;\n",
       "  color: var(--sklearn-color-text-muted);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-3 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-3 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-3 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-3 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-3 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 0.5em;\n",
       "  text-align: center;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-3 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-3 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>PCA(accountant=BudgetAccountant(spent_budget=[(1.0, 0)]),\n",
       "    bounds=(array([  30.,   13.,  150., 2000.]),\n",
       "            array([  65.,   23.,  250., 7000.])),\n",
       "    data_norm=100)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" checked><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>PCA</div></div><div><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>PCA(accountant=BudgetAccountant(spent_budget=[(1.0, 0)]),\n",
       "    bounds=(array([  30.,   13.,  150., 2000.]),\n",
       "            array([  65.,   23.,  250., 7000.])),\n",
       "    data_norm=100)</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "PCA(accountant=BudgetAccountant(spent_budget=[(1.0, 0)]),\n",
       "    bounds=(array([  30.,   13.,  150., 2000.]),\n",
       "            array([  65.,   23.,  250., 7000.])),\n",
       "    data_norm=100)"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pca_model = model.steps[0][1]\n",
    "pca_model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "b1ac9784-bd0e-41c6-bb54-8201d9ab13ad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:06.244989Z",
     "iopub.status.busy": "2025-05-01T08:10:06.244829Z",
     "iopub.status.idle": "2025-05-01T08:10:06.247830Z",
     "shell.execute_reply": "2025-05-01T08:10:06.247433Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-0.23161898, -0.00371458, -0.17006442,  0.95781885],\n",
       "       [ 0.14915561,  0.71242433, -0.68078837, -0.082045  ],\n",
       "       [ 0.95454765, -0.02865324,  0.1481741 ,  0.2570257 ],\n",
       "       [-0.11377185,  0.70115389,  0.69688574,  0.09894172]])"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pca_model.components_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "d7cf2790-1938-48b1-83b3-3b17b06953fc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:06.249242Z",
     "iopub.status.busy": "2025-05-01T08:10:06.249092Z",
     "iopub.status.idle": "2025-05-01T08:10:06.252415Z",
     "shell.execute_reply": "2025-05-01T08:10:06.252059Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([9920.23858417,  611.45627611,  449.35354518,   84.86330783])"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pca_model.explained_variance_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "91992588-2eb5-4b6b-9f30-ccaa272c593a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:06.253650Z",
     "iopub.status.busy": "2025-05-01T08:10:06.253510Z",
     "iopub.status.idle": "2025-05-01T08:10:06.257295Z",
     "shell.execute_reply": "2025-05-01T08:10:06.256920Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.89646826, 0.05525584, 0.04060701, 0.00766889])"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pca_model.explained_variance_ratio_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "9e76a632-114b-428f-ad78-d83fdcd00d56",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:06.258641Z",
     "iopub.status.busy": "2025-05-01T08:10:06.258498Z",
     "iopub.status.idle": "2025-05-01T08:10:06.261823Z",
     "shell.execute_reply": "2025-05-01T08:10:06.261451Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1621.37695333,  149.96258391,  402.53684697,  345.07780206])"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pca_model.singular_values_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "fc13910b-b892-4a46-bff9-c3df4cc6ed72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:06.263099Z",
     "iopub.status.busy": "2025-05-01T08:10:06.262937Z",
     "iopub.status.idle": "2025-05-01T08:10:06.266814Z",
     "shell.execute_reply": "2025-05-01T08:10:06.266475Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([  43.00144957,   16.92453536,  201.43290147, 4512.8140832 ])"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pca_model.mean_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "bd11a051-1452-4b59-8c18-622737986125",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:06.268128Z",
     "iopub.status.busy": "2025-05-01T08:10:06.267986Z",
     "iopub.status.idle": "2025-05-01T08:10:06.271956Z",
     "shell.execute_reply": "2025-05-01T08:10:06.271101Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pca_model.n_components_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "282d55e9-0968-4528-b2d4-4d87d64d4c1a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:06.273255Z",
     "iopub.status.busy": "2025-05-01T08:10:06.273113Z",
     "iopub.status.idle": "2025-05-01T08:10:06.277786Z",
     "shell.execute_reply": "2025-05-01T08:10:06.276445Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pca_model.noise_variance_"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "94eaf59b-c108-424c-8978-b1c86e141ccb",
   "metadata": {},
   "source": [
    "## Step 6: See archives of queries"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "64003c53-de56-4bdc-a3c2-0c3e40031919",
   "metadata": {},
   "source": [
    "She now wants to verify all the queries that she did on the real data. It is possible because an archive of all queries is kept in a secure database. With a function call she can see her queries, budget and associated responses."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "008fd230-cdfd-4e03-91ce-5a60b06c106d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:06.279007Z",
     "iopub.status.busy": "2025-05-01T08:10:06.278857Z",
     "iopub.status.idle": "2025-05-01T08:10:06.287878Z",
     "shell.execute_reply": "2025-05-01T08:10:06.287520Z"
    }
   },
   "outputs": [],
   "source": [
    "previous_queries = client.get_previous_queries()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "1795a54b-d04e-4687-8649-93982c84ad30",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:06.289126Z",
     "iopub.status.busy": "2025-05-01T08:10:06.288975Z",
     "iopub.status.idle": "2025-05-01T08:10:06.298957Z",
     "shell.execute_reply": "2025-05-01T08:10:06.298591Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'user_name': 'Dr.Antartica',\n",
       " 'dataset_name': 'PENGUIN',\n",
       " 'dp_library': 'diffprivlib',\n",
       " 'client_input': {'dataset_name': 'PENGUIN',\n",
       "  'diffprivlib_json': '{\"module\": \"diffprivlib\", \"version\": \"0.6.5\", \"pipeline\": [{\"type\": \"_dpl_type:StandardScaler\", \"name\": \"scaler\", \"params\": {\"with_mean\": true, \"with_std\": true, \"copy\": true, \"epsilon\": 0.5, \"bounds\": {\"_tuple\": true, \"_items\": [[30.0, 13.0, 150.0, 2000.0], [65.0, 23.0, 250.0, 7000.0]]}, \"random_state\": null, \"accountant\": \"_dpl_instance:BudgetAccountant\"}}, {\"type\": \"_dpl_type:LogisticRegression\", \"name\": \"classifier\", \"params\": {\"tol\": 0.0001, \"C\": 1.0, \"fit_intercept\": true, \"random_state\": null, \"max_iter\": 100, \"verbose\": 0, \"warm_start\": false, \"n_jobs\": null, \"epsilon\": 1.0, \"data_norm\": 83.69469642643347, \"accountant\": \"_dpl_instance:BudgetAccountant\"}}]}',\n",
       "  'feature_columns': ['bill_length_mm',\n",
       "   'bill_depth_mm',\n",
       "   'flipper_length_mm',\n",
       "   'body_mass_g'],\n",
       "  'target_columns': ['species'],\n",
       "  'test_size': 0.1,\n",
       "  'test_train_split_seed': 4,\n",
       "  'imputer_strategy': 'mean'},\n",
       " 'response': {'epsilon': 1.5,\n",
       "  'delta': 0.0,\n",
       "  'requested_by': 'Dr.Antartica',\n",
       "  'result': {'res_type': 'diffprivlib',\n",
       "   'score': 0.14285714285714285,\n",
       "   'model': Pipeline(steps=[('scaler',\n",
       "                    StandardScaler(accountant=BudgetAccountant(spent_budget=[(0.5, 0)]),\n",
       "                                   bounds=(array([  30.,   13.,  150., 2000.]),\n",
       "                                           array([  65.,   23.,  250., 7000.])),\n",
       "                                   epsilon=0.5)),\n",
       "                   ('classifier',\n",
       "                    LogisticRegression(accountant=BudgetAccountant(spent_budget=[(1.0, 0)]),\n",
       "                                       data_norm=83.69469642643347))])}},\n",
       " 'timestamp': 1746086990.3112423}"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "query_1 = previous_queries[0]\n",
    "query_1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "ef251e47-67d8-426b-9655-c16d32778579",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:06.300362Z",
     "iopub.status.busy": "2025-05-01T08:10:06.300211Z",
     "iopub.status.idle": "2025-05-01T08:10:06.312458Z",
     "shell.execute_reply": "2025-05-01T08:10:06.312101Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'user_name': 'Dr.Antartica',\n",
       " 'dataset_name': 'PENGUIN',\n",
       " 'dp_library': 'diffprivlib',\n",
       " 'client_input': {'dataset_name': 'PENGUIN',\n",
       "  'diffprivlib_json': '{\"module\": \"diffprivlib\", \"version\": \"0.6.5\", \"pipeline\": [{\"type\": \"_dpl_type:StandardScaler\", \"name\": \"scaler\", \"params\": {\"with_mean\": true, \"with_std\": true, \"copy\": true, \"epsilon\": 0.5, \"bounds\": {\"_tuple\": true, \"_items\": [[30.0, 13.0, 150.0], [65.0, 23.0, 250.0]]}, \"random_state\": null, \"accountant\": \"_dpl_instance:BudgetAccountant\"}}, {\"type\": \"_dpl_type:GaussianNB\", \"name\": \"gaussian\", \"params\": {\"priors\": {\"_tuple\": true, \"_items\": [0.3, 0.3, 0.4]}, \"var_smoothing\": 1e-09, \"epsilon\": 1.0, \"bounds\": {\"_tuple\": true, \"_items\": [[30.0, 13.0, 150.0], [65.0, 23.0, 250.0]]}, \"random_state\": null, \"accountant\": \"_dpl_instance:BudgetAccountant\"}}]}',\n",
       "  'feature_columns': ['bill_length_mm', 'bill_depth_mm', 'flipper_length_mm'],\n",
       "  'target_columns': ['species'],\n",
       "  'test_size': 0.15,\n",
       "  'test_train_split_seed': 1,\n",
       "  'imputer_strategy': 'median'},\n",
       " 'response': {'epsilon': 1.5,\n",
       "  'delta': 0.0,\n",
       "  'requested_by': 'Dr.Antartica',\n",
       "  'result': {'res_type': 'diffprivlib',\n",
       "   'score': 0.17307692307692307,\n",
       "   'model': Pipeline(steps=[('scaler',\n",
       "                    StandardScaler(accountant=BudgetAccountant(spent_budget=[(0.5, 0)]),\n",
       "                                   bounds=(array([ 30.,  13., 150.]),\n",
       "                                           array([ 65.,  23., 250.])),\n",
       "                                   epsilon=0.5)),\n",
       "                   ('gaussian',\n",
       "                    GaussianNB(accountant=BudgetAccountant(spent_budget=[(1.0, 0)]),\n",
       "                               bounds=(array([ 30.,  13., 150.]),\n",
       "                                       array([ 65.,  23., 250.])),\n",
       "                               priors=(0.3, 0.3, 0.4)))])}},\n",
       " 'timestamp': 1746086993.6150599}"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "query_2 = previous_queries[1]\n",
    "query_2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "b2fa8943-f0e0-4902-9001-bd10fb22a653",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:06.313814Z",
     "iopub.status.busy": "2025-05-01T08:10:06.313669Z",
     "iopub.status.idle": "2025-05-01T08:10:06.321920Z",
     "shell.execute_reply": "2025-05-01T08:10:06.321563Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'user_name': 'Dr.Antartica',\n",
       " 'dataset_name': 'PENGUIN',\n",
       " 'dp_library': 'diffprivlib',\n",
       " 'client_input': {'dataset_name': 'PENGUIN',\n",
       "  'diffprivlib_json': '{\"module\": \"diffprivlib\", \"version\": \"0.6.5\", \"pipeline\": [{\"type\": \"_dpl_type:RandomForestClassifier\", \"name\": \"rf\", \"params\": {\"n_estimators\": 10, \"n_jobs\": 1, \"random_state\": null, \"verbose\": 0, \"warm_start\": false, \"max_depth\": 5, \"epsilon\": 2.0, \"bounds\": {\"_tuple\": true, \"_items\": [[30.0, 13.0, 2000.0], [65.0, 23.0, 7000.0]]}, \"classes\": [\"Torgersen\", \"Biscoe\", \"Dream\"], \"shuffle\": false, \"accountant\": \"_dpl_instance:BudgetAccountant\"}}]}',\n",
       "  'feature_columns': ['bill_length_mm', 'bill_depth_mm', 'body_mass_g'],\n",
       "  'target_columns': ['island'],\n",
       "  'test_size': 0.2,\n",
       "  'test_train_split_seed': 1,\n",
       "  'imputer_strategy': 'drop'},\n",
       " 'response': {'epsilon': 2.0,\n",
       "  'delta': 0.0,\n",
       "  'requested_by': 'Dr.Antartica',\n",
       "  'result': {'res_type': 'diffprivlib',\n",
       "   'score': 0.47761194029850745,\n",
       "   'model': Pipeline(steps=[('rf',\n",
       "                    RandomForestClassifier(accountant=BudgetAccountant(spent_budget=[(2.0, 0)]),\n",
       "                                           bounds=(array([  30.,   13., 2000.]),\n",
       "                                                   array([  65.,   23., 7000.])),\n",
       "                                           classes=['Torgersen', 'Biscoe',\n",
       "                                                    'Dream'],\n",
       "                                           epsilon=2.0))])}},\n",
       " 'timestamp': 1746086998.4693854}"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "query_3 = previous_queries[2]\n",
    "query_3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e2c8d40d-94b3-4d69-af99-0ec2936f233e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
