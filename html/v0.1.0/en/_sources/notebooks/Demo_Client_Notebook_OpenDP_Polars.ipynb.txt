{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3f18d338",
   "metadata": {},
   "source": [
    "# Secure Data Disclosure: Client side"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1582a2ae",
   "metadata": {},
   "source": [
    "This notebook showcases how researcher could use the Secure Data Disclosure system. It explains the different functionnalities provided by the `lomas_client` library to interact with the secure server.\n",
    "\n",
    "The secure data are never visible by researchers. They can only access to differentially private responses via queries to the server.\n",
    "\n",
    "Each user has access to one or multiple projects and for each dataset has a limited budget with $\\epsilon$ and $\\delta$ values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "23bb4f13-7800-41b2-b429-68c2d02243d0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:32.414612Z",
     "iopub.status.busy": "2025-05-01T08:10:32.414451Z",
     "iopub.status.idle": "2025-05-01T08:10:32.421022Z",
     "shell.execute_reply": "2025-05-01T08:10:32.420605Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "execution_count": 1,
     "metadata": {
      "image/png": {
       "width": 800
      }
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from IPython.display import Image\n",
    "Image(filename=\"images/image_demo_client.png\", width=800)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5b73135c",
   "metadata": {},
   "source": [
    "We will use the Synthetic Swiss Income Dataset to demonstrate the how to use the library `lomas_client` with polars queries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "01ae30d2",
   "metadata": {},
   "source": [
    "## Step 1: Install the library\n",
    "\n",
    "It can be installed via the pip command:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "36d508bf-6cc3-4034-8e11-fffe858552f9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:32.422433Z",
     "iopub.status.busy": "2025-05-01T08:10:32.422276Z",
     "iopub.status.idle": "2025-05-01T08:10:32.425037Z",
     "shell.execute_reply": "2025-05-01T08:10:32.424225Z"
    }
   },
   "outputs": [],
   "source": [
    "import sys\n",
    "import os\n",
    "sys.path.append(os.path.abspath(os.path.join('..')))\n",
    "# !pip install lomas_client"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9535e92e-620e-4df4-92dd-4ea2c653e4ab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:32.426264Z",
     "iopub.status.busy": "2025-05-01T08:10:32.426118Z",
     "iopub.status.idle": "2025-05-01T08:10:34.940416Z",
     "shell.execute_reply": "2025-05-01T08:10:34.939560Z"
    }
   },
   "outputs": [],
   "source": [
    "from lomas_client import Client\n",
    "import numpy as np\n",
    "import opendp.prelude as dp"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9c63718b",
   "metadata": {},
   "source": [
    "## Step 2: Initialise the client\n",
    "\n",
    "Once the library is installed, a Client object must be created. It is responsible for sending sending requests to the server and processing responses in the local environment. It enables a seamless interaction with the server. \n",
    "\n",
    "To create the client, we need to give it a few parameters:\n",
    "- a url: the root application endpoint to the remote secure server.\n",
    "- user_name: user name as registered in the database\n",
    "- dataset_name: the name of the dataset that we want to query (FSO_INCOME_SYNTHETIC)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f5777e59",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:34.942830Z",
     "iopub.status.busy": "2025-05-01T08:10:34.942520Z",
     "iopub.status.idle": "2025-05-01T08:10:34.946083Z",
     "shell.execute_reply": "2025-05-01T08:10:34.945091Z"
    }
   },
   "outputs": [],
   "source": [
    "DATASET_NAME = \"FSO_INCOME_SYNTHETIC\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "bbfa85a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:34.947979Z",
     "iopub.status.busy": "2025-05-01T08:10:34.947813Z",
     "iopub.status.idle": "2025-05-01T08:10:34.952337Z",
     "shell.execute_reply": "2025-05-01T08:10:34.951525Z"
    }
   },
   "outputs": [],
   "source": [
    "# The following would usually be set in the environment by a system administrator\n",
    "# and be tranparent to lomas users.\n",
    "APP_URL = \"http://localhost:48080\"                                    # For local devenv setup\n",
    "# APP_URL = \"http://lomas_server:48080\"                               # For local docker compose setup\n",
    "# APP_URL = \"http://lomas-server.example.com:80\"                 # For Kubernetes deployment\n",
    "USER_NAME = \"Dr.FSO\"\n",
    "\n",
    "import os\n",
    "os.environ[\"LOMAS_CLIENT_ID\"] = USER_NAME\n",
    "os.environ[\"LOMAS_CLIENT_SECRET\"] = USER_NAME.lower()\n",
    "os.environ[\"LOMAS_KEYCLOAK_ADDRESS\"] = \"localhost\"                    # For local devenv setup\n",
    "# os.environ[\"LOMAS_KEYCLOAK_ADDRESS\"] = \"keycloak\"                   # For local docker compose setup\n",
    "# os.environ[\"LOMAS_KEYCLOAK_ADDRESS\"] = \"lomas-keycloak.example.com\" # For Kubernetes deployment \n",
    "os.environ[\"LOMAS_KEYCLOAK_PORT\"] = \"4442\"                              # For local deployments\n",
    "# os.environ[\"LOMAS_KEYCLOAK_PORT\"] = \"443\"                           # For Kubernetes deployment\n",
    "os.environ[\"LOMAS_KEYCLOAK_USE_TLS\"] = \"0\"                            # For local deployments\n",
    "# os.environ[\"LOMAS_KEYCLOAK_USE_TLS\"] = \"1\"                          # For Kubernetes deployments\n",
    "os.environ[\"LOMAS_REALM\"] = \"lomas\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "a9adf25a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:34.954022Z",
     "iopub.status.busy": "2025-05-01T08:10:34.953660Z",
     "iopub.status.idle": "2025-05-01T08:10:34.969919Z",
     "shell.execute_reply": "2025-05-01T08:10:34.969175Z"
    }
   },
   "outputs": [],
   "source": [
    "client = Client(url=APP_URL, dataset_name=DATASET_NAME)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9b9a5f13",
   "metadata": {},
   "source": [
    "## Step 3: Metadata and dummy dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c7cb5531",
   "metadata": {},
   "source": [
    "### Getting dataset metadata\n",
    "\n",
    "Dr. FSO has never seen the data and as a first step to understand what is available to her, she would like to check the metadata of the dataset. Therefore, she just needs to call the `get_dataset_metadata()` function of the client. As this is public information, this does not cost any budget.\n",
    "\n",
    "This function returns metadata information in a format based on [SmartnoiseSQL dictionary format](https://docs.smartnoise.org/sql/metadata.html#dictionary-format), where among other, there is information about all the available columns, their type, bound values (see Smartnoise page for more details). Any metadata is required for Smartnoise-SQL is also required here and additional information such that the different categories in a string type column column can be added."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "0fdebac9-57fc-4410-878b-5a77425af634",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:34.971371Z",
     "iopub.status.busy": "2025-05-01T08:10:34.971209Z",
     "iopub.status.idle": "2025-05-01T08:10:34.983630Z",
     "shell.execute_reply": "2025-05-01T08:10:34.983259Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'max_ids': 1,\n",
       " 'rows': 2032543,\n",
       " 'row_privacy': True,\n",
       " 'censor_dims': False,\n",
       " 'columns': {'region': {'private_id': False,\n",
       "   'nullable': False,\n",
       "   'max_partition_length': 474690,\n",
       "   'max_influenced_partitions': None,\n",
       "   'max_partition_contributions': None,\n",
       "   'type': 'int',\n",
       "   'precision': 32,\n",
       "   'cardinality': 7,\n",
       "   'categories': [1, 2, 3, 4, 5, 6, 7]},\n",
       "  'eco_branch': {'private_id': False,\n",
       "   'nullable': False,\n",
       "   'max_partition_length': 34330,\n",
       "   'max_influenced_partitions': None,\n",
       "   'max_partition_contributions': None,\n",
       "   'type': 'int',\n",
       "   'precision': 32,\n",
       "   'cardinality': 72,\n",
       "   'categories': [8,\n",
       "    10,\n",
       "    11,\n",
       "    13,\n",
       "    14,\n",
       "    15,\n",
       "    16,\n",
       "    17,\n",
       "    18,\n",
       "    20,\n",
       "    21,\n",
       "    22,\n",
       "    23,\n",
       "    24,\n",
       "    25,\n",
       "    26,\n",
       "    27,\n",
       "    28,\n",
       "    29,\n",
       "    30,\n",
       "    31,\n",
       "    32,\n",
       "    33,\n",
       "    35,\n",
       "    37,\n",
       "    38,\n",
       "    41,\n",
       "    42,\n",
       "    43,\n",
       "    45,\n",
       "    46,\n",
       "    47,\n",
       "    49,\n",
       "    50,\n",
       "    52,\n",
       "    53,\n",
       "    55,\n",
       "    56,\n",
       "    58,\n",
       "    59,\n",
       "    60,\n",
       "    61,\n",
       "    62,\n",
       "    63,\n",
       "    64,\n",
       "    65,\n",
       "    66,\n",
       "    68,\n",
       "    69,\n",
       "    70,\n",
       "    71,\n",
       "    72,\n",
       "    73,\n",
       "    74,\n",
       "    75,\n",
       "    77,\n",
       "    78,\n",
       "    79,\n",
       "    80,\n",
       "    81,\n",
       "    82,\n",
       "    85,\n",
       "    86,\n",
       "    87,\n",
       "    88,\n",
       "    90,\n",
       "    91,\n",
       "    92,\n",
       "    93,\n",
       "    94,\n",
       "    95,\n",
       "    96]},\n",
       "  'profession': {'private_id': False,\n",
       "   'nullable': False,\n",
       "   'max_partition_length': 78857,\n",
       "   'max_influenced_partitions': None,\n",
       "   'max_partition_contributions': None,\n",
       "   'type': 'int',\n",
       "   'precision': 32,\n",
       "   'cardinality': 28,\n",
       "   'categories': [10,\n",
       "    21,\n",
       "    22,\n",
       "    23,\n",
       "    24,\n",
       "    25,\n",
       "    31,\n",
       "    32,\n",
       "    33,\n",
       "    34,\n",
       "    41,\n",
       "    42,\n",
       "    43,\n",
       "    51,\n",
       "    52,\n",
       "    53,\n",
       "    61,\n",
       "    62,\n",
       "    71,\n",
       "    72,\n",
       "    73,\n",
       "    74,\n",
       "    81,\n",
       "    83,\n",
       "    91,\n",
       "    92,\n",
       "    93,\n",
       "    94]},\n",
       "  'education': {'private_id': False,\n",
       "   'nullable': False,\n",
       "   'max_partition_length': 268697,\n",
       "   'max_influenced_partitions': None,\n",
       "   'max_partition_contributions': None,\n",
       "   'type': 'int',\n",
       "   'precision': 32,\n",
       "   'cardinality': 8,\n",
       "   'categories': [1, 2, 3, 4, 5, 6, 7, 8]},\n",
       "  'age': {'private_id': False,\n",
       "   'nullable': False,\n",
       "   'max_partition_length': 53952,\n",
       "   'max_influenced_partitions': None,\n",
       "   'max_partition_contributions': None,\n",
       "   'type': 'int',\n",
       "   'precision': 32,\n",
       "   'lower': 0,\n",
       "   'upper': 120},\n",
       "  'sex': {'private_id': False,\n",
       "   'nullable': False,\n",
       "   'max_partition_length': 1397824,\n",
       "   'max_influenced_partitions': None,\n",
       "   'max_partition_contributions': None,\n",
       "   'type': 'int',\n",
       "   'precision': 32,\n",
       "   'cardinality': 2,\n",
       "   'categories': [0, 1]},\n",
       "  'income': {'private_id': False,\n",
       "   'nullable': False,\n",
       "   'max_partition_length': None,\n",
       "   'max_influenced_partitions': None,\n",
       "   'max_partition_contributions': None,\n",
       "   'type': 'float',\n",
       "   'precision': 64,\n",
       "   'lower': 1000.0,\n",
       "   'upper': 100000.0}}}"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "income_metadata = client.get_dataset_metadata()\n",
    "income_metadata"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a3c899d",
   "metadata": {},
   "source": [
    "### Get a dummy dataset\n",
    "\n",
    "Now, that she has seen and understood the metadata, she wants to get an even better understanding of the dataset (but is still not able to see it). A solution to have an idea of what the dataset looks like it to create a dummy dataset. \n",
    "\n",
    "Based on the public metadata of the dataset, a random dataframe can be created created. By default, there will be 100 rows and the seed is set to 42 to ensure reproducibility, but these 2 variables can be changed to obtain different dummy datasets.\n",
    "Getting a dummy dataset does not affect the budget as there is no differential privacy here. It is not a synthetic dataset and all that could be learn here is already present in the public metadata (it is created randomly on the fly based on the metadata).\n",
    "\n",
    "Dr. FSO first create a dummy dataset with 200 rows and chooses a seed of 0."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "01f4365a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:34.985051Z",
     "iopub.status.busy": "2025-05-01T08:10:34.984746Z",
     "iopub.status.idle": "2025-05-01T08:10:34.987907Z",
     "shell.execute_reply": "2025-05-01T08:10:34.986537Z"
    }
   },
   "outputs": [],
   "source": [
    "NB_ROWS = 200\n",
    "SEED = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "3f553b29",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:34.989068Z",
     "iopub.status.busy": "2025-05-01T08:10:34.988908Z",
     "iopub.status.idle": "2025-05-01T08:10:35.275515Z",
     "shell.execute_reply": "2025-05-01T08:10:35.274724Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (200, 7)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>region</th><th>eco_branch</th><th>profession</th><th>education</th><th>age</th><th>sex</th><th>income</th></tr><tr><td>i32</td><td>i32</td><td>i32</td><td>i32</td><td>i32</td><td>i32</td><td>f64</td></tr></thead><tbody><tr><td>6</td><td>27</td><td>94</td><td>5</td><td>111</td><td>1</td><td>1611.50605</td></tr><tr><td>5</td><td>52</td><td>33</td><td>8</td><td>24</td><td>0</td><td>72395.412826</td></tr><tr><td>4</td><td>35</td><td>81</td><td>6</td><td>41</td><td>0</td><td>67983.841861</td></tr><tr><td>2</td><td>27</td><td>25</td><td>5</td><td>113</td><td>1</td><td>66033.243543</td></tr><tr><td>3</td><td>88</td><td>41</td><td>4</td><td>119</td><td>0</td><td>69054.085229</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>7</td><td>77</td><td>93</td><td>1</td><td>119</td><td>0</td><td>37851.861395</td></tr><tr><td>3</td><td>74</td><td>33</td><td>7</td><td>21</td><td>0</td><td>21927.13039</td></tr><tr><td>7</td><td>95</td><td>72</td><td>4</td><td>51</td><td>1</td><td>41515.893667</td></tr><tr><td>3</td><td>58</td><td>34</td><td>8</td><td>25</td><td>1</td><td>44467.752841</td></tr><tr><td>6</td><td>62</td><td>83</td><td>4</td><td>102</td><td>0</td><td>99534.680535</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (200, 7)\n",
       "┌────────┬────────────┬────────────┬───────────┬─────┬─────┬──────────────┐\n",
       "│ region ┆ eco_branch ┆ profession ┆ education ┆ age ┆ sex ┆ income       │\n",
       "│ ---    ┆ ---        ┆ ---        ┆ ---       ┆ --- ┆ --- ┆ ---          │\n",
       "│ i32    ┆ i32        ┆ i32        ┆ i32       ┆ i32 ┆ i32 ┆ f64          │\n",
       "╞════════╪════════════╪════════════╪═══════════╪═════╪═════╪══════════════╡\n",
       "│ 6      ┆ 27         ┆ 94         ┆ 5         ┆ 111 ┆ 1   ┆ 1611.50605   │\n",
       "│ 5      ┆ 52         ┆ 33         ┆ 8         ┆ 24  ┆ 0   ┆ 72395.412826 │\n",
       "│ 4      ┆ 35         ┆ 81         ┆ 6         ┆ 41  ┆ 0   ┆ 67983.841861 │\n",
       "│ 2      ┆ 27         ┆ 25         ┆ 5         ┆ 113 ┆ 1   ┆ 66033.243543 │\n",
       "│ 3      ┆ 88         ┆ 41         ┆ 4         ┆ 119 ┆ 0   ┆ 69054.085229 │\n",
       "│ …      ┆ …          ┆ …          ┆ …         ┆ …   ┆ …   ┆ …            │\n",
       "│ 7      ┆ 77         ┆ 93         ┆ 1         ┆ 119 ┆ 0   ┆ 37851.861395 │\n",
       "│ 3      ┆ 74         ┆ 33         ┆ 7         ┆ 21  ┆ 0   ┆ 21927.13039  │\n",
       "│ 7      ┆ 95         ┆ 72         ┆ 4         ┆ 51  ┆ 1   ┆ 41515.893667 │\n",
       "│ 3      ┆ 58         ┆ 34         ┆ 8         ┆ 25  ┆ 1   ┆ 44467.752841 │\n",
       "│ 6      ┆ 62         ┆ 83         ┆ 4         ┆ 102 ┆ 0   ┆ 99534.680535 │\n",
       "└────────┴────────────┴────────────┴───────────┴─────┴─────┴──────────────┘"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dummy_lf = client.get_dummy_lf(nb_rows=NB_ROWS, seed = SEED)\n",
    "\n",
    "dummy_lf.collect()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "64666bb4-2db9-427d-ac5c-13ec83c92174",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:35.277178Z",
     "iopub.status.busy": "2025-05-01T08:10:35.277002Z",
     "iopub.status.idle": "2025-05-01T08:10:35.291915Z",
     "shell.execute_reply": "2025-05-01T08:10:35.291549Z"
    }
   },
   "outputs": [],
   "source": [
    "test = client.get_dummy_dataset(nb_rows=NB_ROWS, seed = SEED)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "2a8e1633-05c3-486a-aad5-dced8ac4ee41",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:35.293446Z",
     "iopub.status.busy": "2025-05-01T08:10:35.293141Z",
     "iopub.status.idle": "2025-05-01T08:10:35.298606Z",
     "shell.execute_reply": "2025-05-01T08:10:35.297570Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "region          int32\n",
       "eco_branch      int32\n",
       "profession      int32\n",
       "education       int32\n",
       "age             int32\n",
       "sex             int32\n",
       "income        float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9e7ca7ae-bf17-40c8-aa75-2d72fcdd3088",
   "metadata": {},
   "source": [
    "## Step 4: Prepare the pipeline"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2de1389c-53a7-4098-bc3c-397c12a4b869",
   "metadata": {},
   "source": [
    "It is necessary to prepare the pipeline before sending the query to the client."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "2864729f-2ce4-4d81-a446-8e3f2c1493b3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:35.299877Z",
     "iopub.status.busy": "2025-05-01T08:10:35.299725Z",
     "iopub.status.idle": "2025-05-01T08:10:35.302604Z",
     "shell.execute_reply": "2025-05-01T08:10:35.301860Z"
    }
   },
   "outputs": [],
   "source": [
    "import polars as pl"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f5dcadcc-b5b5-4d1b-8b44-9d1576b4d0ff",
   "metadata": {},
   "source": [
    "### a. mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "3e03a4c6-33aa-49b1-9b17-0dd84dea750b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:35.304027Z",
     "iopub.status.busy": "2025-05-01T08:10:35.303718Z",
     "iopub.status.idle": "2025-05-01T08:10:35.306880Z",
     "shell.execute_reply": "2025-05-01T08:10:35.306128Z"
    }
   },
   "outputs": [],
   "source": [
    "# Income bounds\n",
    "income_lower_bound, income_upper_bound = income_metadata[\"columns\"][\"income\"][\"lower\"], income_metadata[\"columns\"][\"income\"][\"upper\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "55cbec6c-f178-4c6a-b54f-3cc2f5906c21",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:35.308209Z",
     "iopub.status.busy": "2025-05-01T08:10:35.308059Z",
     "iopub.status.idle": "2025-05-01T08:10:35.334505Z",
     "shell.execute_reply": "2025-05-01T08:10:35.334156Z"
    }
   },
   "outputs": [],
   "source": [
    "plan = dummy_lf.select(\n",
    "    pl.col(\"income\").dp.mean(bounds=(income_lower_bound, income_upper_bound), scale=(100,1)\n",
    "))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7e3d840f-1b54-43f2-9369-32a0c726470c",
   "metadata": {},
   "source": [
    "## Step 5: Send the queries"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4de96a5d-9969-4af2-8c6a-cb5e1835253c",
   "metadata": {},
   "source": [
    "### a. Dummy queries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "457bda9b-477a-433e-b2fd-fa0292d491f1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:35.336045Z",
     "iopub.status.busy": "2025-05-01T08:10:35.335880Z",
     "iopub.status.idle": "2025-05-01T08:10:38.577377Z",
     "shell.execute_reply": "2025-05-01T08:10:38.576489Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/azureuser/work/sdd-poc-server/client/lomas_client/libraries/opendp.py:58: UserWarning: 'json' serialization format of LazyFrame is deprecated\n",
      "  body_json[\"opendp_json\"] = opendp_pipeline.serialize(format=\"json\")\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "shape: (1, 1)\n",
      "┌─────────────┐\n",
      "│ income      │\n",
      "│ ---         │\n",
      "│ f64         │\n",
      "╞═════════════╡\n",
      "│ 7052.657714 │\n",
      "└─────────────┘\n"
     ]
    }
   ],
   "source": [
    "res = client.opendp.query(plan, dummy = False, nb_rows = NB_ROWS, seed=SEED)\n",
    "\n",
    "print(res.result.value)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5cef7045-e969-4ed8-8cfd-7b00af11bfcb",
   "metadata": {},
   "source": [
    "By default, the client will use a laplace mechanism. Note that Dr. FSO can also use a Gaussian mechanism if wanted."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "f1e0026d-cc70-4dcc-83cc-1c8f8d7ad4c8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:38.579146Z",
     "iopub.status.busy": "2025-05-01T08:10:38.578812Z",
     "iopub.status.idle": "2025-05-01T08:10:39.138549Z",
     "shell.execute_reply": "2025-05-01T08:10:39.138149Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "shape: (1, 1)\n",
      "┌─────────────┐\n",
      "│ income      │\n",
      "│ ---         │\n",
      "│ f64         │\n",
      "╞═════════════╡\n",
      "│ 49551.53965 │\n",
      "└─────────────┘\n"
     ]
    }
   ],
   "source": [
    "res = client.opendp.query(plan, mechanism = \"gaussian\", fixed_delta = 1.0, dummy = True, nb_rows = NB_ROWS, seed=SEED)\n",
    "\n",
    "print(res.result.value)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c74571b5-a35b-44a2-bf01-f95a55ad85fb",
   "metadata": {},
   "source": [
    "### b. budget estimation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "73dcbca0-133e-4d31-93de-4f2a951dc0c2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:39.140195Z",
     "iopub.status.busy": "2025-05-01T08:10:39.140032Z",
     "iopub.status.idle": "2025-05-01T08:10:40.090258Z",
     "shell.execute_reply": "2025-05-01T08:10:40.088292Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "epsilon=1.8346351313032196 delta=0.0\n"
     ]
    }
   ],
   "source": [
    "res = client.opendp.cost(plan, mechanism = \"laplace\")\n",
    "\n",
    "print(res)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "8f0cf643-c55c-4a11-bbeb-d16d3f58095b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:40.097910Z",
     "iopub.status.busy": "2025-05-01T08:10:40.097711Z",
     "iopub.status.idle": "2025-05-01T08:10:40.992596Z",
     "shell.execute_reply": "2025-05-01T08:10:40.992156Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "epsilon=7.5318348577180965 delta=0.001\n"
     ]
    }
   ],
   "source": [
    "res = client.opendp.cost(plan, mechanism = \"gaussian\", fixed_delta = 0.001)\n",
    "\n",
    "print(res)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "00d5de46-6540-41da-a738-4ab6a8fb3faf",
   "metadata": {},
   "source": [
    "### c. Actual queries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "613630f1-f35c-4fbd-ae4b-43cd9ca3b4aa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:40.994472Z",
     "iopub.status.busy": "2025-05-01T08:10:40.994161Z",
     "iopub.status.idle": "2025-05-01T08:10:43.129082Z",
     "shell.execute_reply": "2025-05-01T08:10:43.126993Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "shape: (1, 1)\n",
      "┌─────────────┐\n",
      "│ income      │\n",
      "│ ---         │\n",
      "│ f64         │\n",
      "╞═════════════╡\n",
      "│ 7052.664729 │\n",
      "└─────────────┘\n"
     ]
    }
   ],
   "source": [
    "res = client.opendp.query(plan, mechanism = \"laplace\")\n",
    "\n",
    "print(res.result.value)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "37d75b0c-8d92-4bbb-a4b2-903e9af0fd5c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:43.133351Z",
     "iopub.status.busy": "2025-05-01T08:10:43.133169Z",
     "iopub.status.idle": "2025-05-01T08:10:45.792525Z",
     "shell.execute_reply": "2025-05-01T08:10:45.791990Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "shape: (1, 1)\n",
      "┌─────────────┐\n",
      "│ income      │\n",
      "│ ---         │\n",
      "│ f64         │\n",
      "╞═════════════╡\n",
      "│ 7052.664778 │\n",
      "└─────────────┘\n"
     ]
    }
   ],
   "source": [
    "res = client.opendp.query(plan, mechanism = \"gaussian\", fixed_delta = 0.001)\n",
    "\n",
    "print(res.result.value)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9068bd3f-f474-4df2-aacd-e0562c43e4be",
   "metadata": {},
   "source": [
    "## Group_by examples"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "49560ec2-ed3a-4311-89d7-a8ce3753fdf1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:45.794329Z",
     "iopub.status.busy": "2025-05-01T08:10:45.794162Z",
     "iopub.status.idle": "2025-05-01T08:10:45.805195Z",
     "shell.execute_reply": "2025-05-01T08:10:45.804561Z"
    }
   },
   "outputs": [],
   "source": [
    "# Grouped by \"sex\"\n",
    "plan = dummy_lf.group_by(\"sex\").agg([\n",
    "    pl.col(\"income\").dp.mean(bounds=(income_lower_bound, income_upper_bound), scale=(100.0,1))\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "1197cd26-210d-400e-9b7d-b7b5ee8de0ec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:45.806657Z",
     "iopub.status.busy": "2025-05-01T08:10:45.806507Z",
     "iopub.status.idle": "2025-05-01T08:10:47.098511Z",
     "shell.execute_reply": "2025-05-01T08:10:47.098069Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "shape: (2, 2)\n",
      "┌─────┬──────────────┐\n",
      "│ sex ┆ income       │\n",
      "│ --- ┆ ---          │\n",
      "│ i64 ┆ f64          │\n",
      "╞═════╪══════════════╡\n",
      "│ 1   ┆ 52396.828048 │\n",
      "│ 0   ┆ 53883.149998 │\n",
      "└─────┴──────────────┘\n"
     ]
    }
   ],
   "source": [
    "res = client.opendp.query(plan, dummy=True)\n",
    "print(res.result.value)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "8e9adeab-3f59-4a2c-9622-44a71b3777cb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:47.100149Z",
     "iopub.status.busy": "2025-05-01T08:10:47.099828Z",
     "iopub.status.idle": "2025-05-01T08:10:47.102824Z",
     "shell.execute_reply": "2025-05-01T08:10:47.102456Z"
    }
   },
   "outputs": [],
   "source": [
    "plan = dummy_lf.group_by([\"sex\",\"region\"]).agg([\n",
    "    pl.col(\"income\").dp.mean(bounds=(income_lower_bound, income_upper_bound), scale=(100.0,1))\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "7d676003-71ff-4c92-9d40-11d3ff665294",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:47.104052Z",
     "iopub.status.busy": "2025-05-01T08:10:47.103892Z",
     "iopub.status.idle": "2025-05-01T08:10:48.090447Z",
     "shell.execute_reply": "2025-05-01T08:10:48.090027Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "shape: (14, 3)\n",
      "┌─────┬────────┬──────────────┐\n",
      "│ sex ┆ region ┆ income       │\n",
      "│ --- ┆ ---    ┆ ---          │\n",
      "│ i64 ┆ i64    ┆ f64          │\n",
      "╞═════╪════════╪══════════════╡\n",
      "│ 1   ┆ 2      ┆ 38531.333782 │\n",
      "│ 0   ┆ 4      ┆ 93740.530829 │\n",
      "│ 1   ┆ 6      ┆ 35213.421944 │\n",
      "│ 0   ┆ 1      ┆ 54242.843613 │\n",
      "│ 0   ┆ 3      ┆ 46599.655232 │\n",
      "│ …   ┆ …      ┆ …            │\n",
      "│ 0   ┆ 2      ┆ null         │\n",
      "│ 0   ┆ 5      ┆ 61697.167977 │\n",
      "│ 0   ┆ 6      ┆ 54648.316915 │\n",
      "│ 0   ┆ 7      ┆ 31342.587703 │\n",
      "│ 1   ┆ 1      ┆ 40140.414921 │\n",
      "└─────┴────────┴──────────────┘\n"
     ]
    }
   ],
   "source": [
    "res = client.opendp.query(plan, dummy=True)\n",
    "\n",
    "print(res.result.value)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "0a998fa3-49df-483c-9a8c-fb7052cf3565",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:48.092524Z",
     "iopub.status.busy": "2025-05-01T08:10:48.092286Z",
     "iopub.status.idle": "2025-05-01T08:10:48.861812Z",
     "shell.execute_reply": "2025-05-01T08:10:48.861374Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "epsilon=1.1015634949951034 delta=0.001\n"
     ]
    }
   ],
   "source": [
    "res = client.opendp.cost(plan, mechanism = \"gaussian\", fixed_delta = 0.001)\n",
    "\n",
    "print(res)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "86040739-c033-4e84-a077-bbe31bcf9234",
   "metadata": {},
   "source": [
    "## Quantile examples"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "c60e1264-b84e-434f-b058-5dbb7feb40c4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:48.866735Z",
     "iopub.status.busy": "2025-05-01T08:10:48.866561Z",
     "iopub.status.idle": "2025-05-01T08:10:48.872972Z",
     "shell.execute_reply": "2025-05-01T08:10:48.870369Z"
    }
   },
   "outputs": [],
   "source": [
    "candidates = list(range(1_000, 100_000, 1000))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "c0ab084e-0623-43f7-8c9c-c37aa2b9bfff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:48.874587Z",
     "iopub.status.busy": "2025-05-01T08:10:48.874344Z",
     "iopub.status.idle": "2025-05-01T08:10:48.877810Z",
     "shell.execute_reply": "2025-05-01T08:10:48.877302Z"
    }
   },
   "outputs": [],
   "source": [
    "plan = dummy_lf.select(\n",
    "    pl.col(\"income\").dp.quantile(alpha=.75, candidates=candidates, scale=1.)\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "88e343e9-a41d-4766-a15e-e933efa2e98e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:48.880802Z",
     "iopub.status.busy": "2025-05-01T08:10:48.880273Z",
     "iopub.status.idle": "2025-05-01T08:10:51.873344Z",
     "shell.execute_reply": "2025-05-01T08:10:51.872796Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "shape: (1, 1)\n",
      "┌────────┐\n",
      "│ income │\n",
      "│ ---    │\n",
      "│ i64    │\n",
      "╞════════╡\n",
      "│ 8000   │\n",
      "└────────┘\n"
     ]
    }
   ],
   "source": [
    "res = client.opendp.query(plan)\n",
    "\n",
    "print(res.result.value)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e5b01179-5ff2-48be-9369-a7c581da60b9",
   "metadata": {},
   "source": [
    "### Quantile with group_by"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "b2416148-10db-4125-af0b-a0b8cd718025",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:51.877601Z",
     "iopub.status.busy": "2025-05-01T08:10:51.877352Z",
     "iopub.status.idle": "2025-05-01T08:10:51.883940Z",
     "shell.execute_reply": "2025-05-01T08:10:51.883553Z"
    }
   },
   "outputs": [],
   "source": [
    "plan = dummy_lf.group_by(\"sex\").agg([\n",
    "    pl.col(\"income\").dp.quantile(alpha=.25, candidates=candidates, scale=(1.)),\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "1ac9e88e-4984-4cd5-9968-a7a2d8d0de5f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:51.890086Z",
     "iopub.status.busy": "2025-05-01T08:10:51.889509Z",
     "iopub.status.idle": "2025-05-01T08:10:54.089765Z",
     "shell.execute_reply": "2025-05-01T08:10:54.089016Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "shape: (2, 2)\n",
      "┌─────┬────────┐\n",
      "│ sex ┆ income │\n",
      "│ --- ┆ ---    │\n",
      "│ i64 ┆ i64    │\n",
      "╞═════╪════════╡\n",
      "│ 1   ┆ 6000   │\n",
      "│ 0   ┆ 5000   │\n",
      "└─────┴────────┘\n"
     ]
    }
   ],
   "source": [
    "res = client.opendp.query(plan)\n",
    "\n",
    "print(res.result.value)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "efe41f03-7f56-4fed-822a-9e135bfc0ddb",
   "metadata": {},
   "source": [
    "### Quantile with group_by on mulitple columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "f8ac3c53-88e7-4235-8370-abb71a18c74d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:54.091391Z",
     "iopub.status.busy": "2025-05-01T08:10:54.091018Z",
     "iopub.status.idle": "2025-05-01T08:10:54.094889Z",
     "shell.execute_reply": "2025-05-01T08:10:54.094072Z"
    }
   },
   "outputs": [],
   "source": [
    "plan = dummy_lf.group_by([\"sex\", \"region\"]).agg([\n",
    "    pl.col(\"income\").dp.quantile(alpha=.75, candidates=candidates, scale=(1.)),\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "fe22cd4c-2321-4779-8d6d-e5f4a6337929",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:54.096357Z",
     "iopub.status.busy": "2025-05-01T08:10:54.096209Z",
     "iopub.status.idle": "2025-05-01T08:10:57.258029Z",
     "shell.execute_reply": "2025-05-01T08:10:57.257203Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "shape: (14, 3)\n",
      "┌─────┬────────┬────────┐\n",
      "│ sex ┆ region ┆ income │\n",
      "│ --- ┆ ---    ┆ ---    │\n",
      "│ i64 ┆ i64    ┆ i64    │\n",
      "╞═════╪════════╪════════╡\n",
      "│ 0   ┆ 3      ┆ 8000   │\n",
      "│ 1   ┆ 5      ┆ 8000   │\n",
      "│ 0   ┆ 4      ┆ 8000   │\n",
      "│ 1   ┆ 1      ┆ 9000   │\n",
      "│ 1   ┆ 4      ┆ 9000   │\n",
      "│ …   ┆ …      ┆ …      │\n",
      "│ 0   ┆ 2      ┆ 7000   │\n",
      "│ 0   ┆ 1      ┆ 8000   │\n",
      "│ 1   ┆ 2      ┆ 9000   │\n",
      "│ 0   ┆ 6      ┆ 8000   │\n",
      "│ 1   ┆ 6      ┆ 9000   │\n",
      "└─────┴────────┴────────┘\n"
     ]
    }
   ],
   "source": [
    "res = client.opendp.query(plan)\n",
    "\n",
    "print(res.result.value)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "06c4566a",
   "metadata": {},
   "source": [
    "### Income distribution for partitions of the population:\n",
    "#### Prepare the pipeline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "8bbc7518",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:57.259428Z",
     "iopub.status.busy": "2025-05-01T08:10:57.259271Z",
     "iopub.status.idle": "2025-05-01T08:10:59.885120Z",
     "shell.execute_reply": "2025-05-01T08:10:59.883896Z"
    }
   },
   "outputs": [],
   "source": [
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "d6034868",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:59.887263Z",
     "iopub.status.busy": "2025-05-01T08:10:59.886976Z",
     "iopub.status.idle": "2025-05-01T08:10:59.890073Z",
     "shell.execute_reply": "2025-05-01T08:10:59.889702Z"
    }
   },
   "outputs": [],
   "source": [
    "# Partitions\n",
    "PARTITIONS = ['sex', 'region']\n",
    "# Prepare a list of candidates\n",
    "candidates = [x * 250.0 for x in range(8, 52)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "679db7b1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:59.891462Z",
     "iopub.status.busy": "2025-05-01T08:10:59.891311Z",
     "iopub.status.idle": "2025-05-01T08:10:59.894456Z",
     "shell.execute_reply": "2025-05-01T08:10:59.894100Z"
    }
   },
   "outputs": [],
   "source": [
    "def make_quantile_pipeline(quantile):\n",
    "    # Create expression\n",
    "    return dummy_lf.group_by([\"sex\", \"region\"]).agg([\n",
    "        pl.col(\"income\").dp.quantile(alpha=quantile, candidates=candidates, scale=1.),\n",
    "    ])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "66d75ad7-9c4a-46f7-9db7-52d43f084267",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:59.895757Z",
     "iopub.status.busy": "2025-05-01T08:10:59.895614Z",
     "iopub.status.idle": "2025-05-01T08:10:59.899019Z",
     "shell.execute_reply": "2025-05-01T08:10:59.898262Z"
    }
   },
   "outputs": [],
   "source": [
    "q25 = make_quantile_pipeline(0.25)\n",
    "q50 = make_quantile_pipeline(0.5)\n",
    "q75 = make_quantile_pipeline(0.75)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "79d8ea66-0f57-4b29-be1a-e1b161f522ee",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:10:59.900558Z",
     "iopub.status.busy": "2025-05-01T08:10:59.900205Z",
     "iopub.status.idle": "2025-05-01T08:11:11.073650Z",
     "shell.execute_reply": "2025-05-01T08:11:11.072822Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/azureuser/work/sdd-poc-server/client/lomas_client/libraries/opendp.py:58: UserWarning: 'json' serialization format of LazyFrame is deprecated\n",
      "  body_json[\"opendp_json\"] = opendp_pipeline.serialize(format=\"json\")\n"
     ]
    }
   ],
   "source": [
    "r25 = client.opendp.query(q25)\n",
    "r50 = client.opendp.query(q50)\n",
    "r75 = client.opendp.query(q75)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f2efcbed-b33b-42c3-b1f0-60e50169edfd",
   "metadata": {},
   "source": [
    "Let us put together the results and show them in a table. Notice that the output is a polars dataframe, we thus need to transform it to a pandas DataFrame if we want to work with pandas."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "28c61734",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:11:11.075513Z",
     "iopub.status.busy": "2025-05-01T08:11:11.075335Z",
     "iopub.status.idle": "2025-05-01T08:11:11.115021Z",
     "shell.execute_reply": "2025-05-01T08:11:11.114637Z"
    }
   },
   "outputs": [],
   "source": [
    "r25 = r25.result.value.to_pandas()\n",
    "r50 = r50.result.value.to_pandas()\n",
    "r75 = r75.result.value.to_pandas()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "59b7b54d-e5d2-4c07-91ab-f2c08d607035",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:11:11.116515Z",
     "iopub.status.busy": "2025-05-01T08:11:11.116365Z",
     "iopub.status.idle": "2025-05-01T08:11:11.140681Z",
     "shell.execute_reply": "2025-05-01T08:11:11.140241Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sex</th>\n",
       "      <th>region</th>\n",
       "      <th>income_25</th>\n",
       "      <th>income_50</th>\n",
       "      <th>income</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>5000.0</td>\n",
       "      <td>6250.0</td>\n",
       "      <td>7750.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>5750.0</td>\n",
       "      <td>7000.0</td>\n",
       "      <td>8750.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>4750.0</td>\n",
       "      <td>6000.0</td>\n",
       "      <td>7250.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>5500.0</td>\n",
       "      <td>7000.0</td>\n",
       "      <td>8500.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>5000.0</td>\n",
       "      <td>6250.0</td>\n",
       "      <td>7750.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    sex  region  income_25  income_50  income\n",
       "2     0       1     5000.0     6250.0  7750.0\n",
       "0     1       1     5750.0     7000.0  8750.0\n",
       "1     0       2     4750.0     6000.0  7250.0\n",
       "13    1       2     5500.0     7000.0  8500.0\n",
       "3     0       3     5000.0     6250.0  7750.0"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results = pd.merge(r25, r50, on=PARTITIONS, suffixes=('_25', '_50'))\n",
    "results = pd.merge(results, r75, on=PARTITIONS)\n",
    "results.sort_values(by = ['region', 'sex']).head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b4658185-caa1-4261-afa7-963095d99320",
   "metadata": {},
   "source": [
    "#### Visualise results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "2e0f3a59",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:11:11.142272Z",
     "iopub.status.busy": "2025-05-01T08:11:11.141979Z",
     "iopub.status.idle": "2025-05-01T08:11:11.155756Z",
     "shell.execute_reply": "2025-05-01T08:11:11.155397Z"
    }
   },
   "outputs": [],
   "source": [
    "def quantile_data(q1, q2, q3):\n",
    "    return np.concatenate((np.random.uniform(q1, q2, size=50), np.random.uniform(q2, q3, size=50)))\n",
    "\n",
    "results['data'] = results.apply(\n",
    "    lambda row: quantile_data(row[\"income_25\"], row[\"income_50\"], row[\"income\"]),\n",
    "    axis=1,\n",
    ")\n",
    "results['sex'] = results['sex'].replace({0: 'woman', 1: 'man'})\n",
    "results['region'] = results['region'].replace({1: 'Lemanique', 2: 'Mittleland', 3: 'North-West', 4: 'Zürich', 5: 'Oriental', 6: 'Central', 7: 'Ticino'})\n",
    "results = results.explode('data', ignore_index=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "759ff292-3b29-4644-8b36-5f94af2a16c6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T08:11:11.157132Z",
     "iopub.status.busy": "2025-05-01T08:11:11.156985Z",
     "iopub.status.idle": "2025-05-01T08:11:11.500033Z",
     "shell.execute_reply": "2025-05-01T08:11:11.499557Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10, 6))\n",
    "sns.boxplot(x=\"region\", y=\"data\", hue=\"sex\", data=results, palette=\"Set1\", width=0.5);\n",
    "plt.xticks(fontsize=12)\n",
    "plt.yticks(fontsize=12)\n",
    "plt.xlabel('Regions', fontsize=15)\n",
    "plt.ylabel('Income per month (in CHF)', fontsize=15)\n",
    "plt.title('Income per partition of the population', fontsize=16)\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
